%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1402.i032.007.P.m003.c20.hand phone.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Дина
%%CreationDate: 3/8/2014
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.3%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.3 x691 R agm 4.6676 ct 5.2594%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">РџРµС‡Р°С‚СЊ</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2014-03-08T11:56:34+04:00</xmp:MetadataDate>
         <xmp:ModifyDate>2014-03-08T11:56:34+04:00</xmp:ModifyDate>
         <xmp:CreateDate>2014-03-08T11:56:32+04:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:Rating>4</xmp:Rating>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVC/v7&#xA;LT7Ke+vpktrO1jaW4nkIVEjQVZmJ6AAYq85P/OSn5KAkHzH022s74/qgxV3/AEMr+Sf/AFMf/Tlf&#xA;/wDVDFWR+TfzS8hec57i38tasl/cWqiSaH05oXCEgcgs6RllqQKjFWVYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXnf/ADkHKF/KHzHGrUlkt04qOpAn&#xA;jL9O3GtfbImYBAPVkIkix0fCdkbQXkBvAxtBIn1gR05mPkOfGvfj0yTFmP5kT+RpUsT5cFt64eb1&#xA;TZJPHGLY8PQWQTgEyD4qnr/N2xVmf/OI/wD5NSX/ALZlx/ycixV9mYq7FXYq7FXYq+ZfM35VedPz&#xA;Q8/+a7+DzGLK10fUP0bb20vqlUSOGNxwCEKo+PfxNTiqlbf84k+blL/WPNqsDTiI/WWnj9rliqvr&#xA;n5CeZfLOiXevLrkJbSYWuVaISpNWEcqq4pRtuuKvoXyxe3F/5a0m+uW53N3ZW88zgAVeSJWY0Gw3&#xA;OKpnirsVdirsVad0RC7kKqirMdgAMBIAspAvYPJfzN/Pj/CvmTR/LmjaSNX1DVuHGWWY28KmWUwo&#xA;leDsTyFSdgB49oY8sZi4m2eTFKG0gnH+I/zv/wCpN0z/ALi3/XjLGtUg1386JCfV8r6ZbgfZ/wBy&#xA;Blr9IRP1Yqrfpf8AOD/qwaZ/0lt/TFVjax+cg+z5e0s/9HjD+GKpT+W351N5n1fU9I1bTl06606p&#xA;M8MhliYh/TZCCAwNdwdwfbateTLGH1GmzHilP6Q9RVlZQykMrCoI3BByYNsCKbwodirsVdirsVdi&#xA;rsVeX/mnrEFx5V8wM9PqkdhdLU0IZRCw6e5zS5M/iZRXKw7jHh4MRvnT4ZzdOndir3j/AJxt8nap&#xA;a3knnKVmt4Gje209ejSVZS8n+qOHH338M1mu1FERjzG7sdFgu5Hkdn1ppd4byxinIozCjj/KBocz&#xA;dPl44CTh58fBMhFZc1OxV2Ksf836tJa28drA5Sab4nZTQhB/U5ru0NQYARHMux7PwCZMjyDC/wAj&#xA;CTdeeCdyddap/wCjaHMnSf3Ufc42r/vZe96pmQ47E/zZbj+WfmdvDTrg/wDJM4qmPkY18k+Xz46b&#xA;Z/8AJhMVTvFXYq7FXYqkvmm7EVgIAfjnYVHfiu5/GmYHaGSocPUubocdzvufL35vPT86fIy0+1JZ&#xA;7/K+OR7N+g+9l2h9Q9z64lnhip6jqnI0XkQK5nymBzLhRgTyC/JMXYqsinhlBMTq4BoeJrTIxmJc&#xA;iylEjmHyr+TcvPz/AObR4PJ/1ENmv7S+ke9zuz/qL6V8r3Ym0/0SayQEinfidx/TLNBk4oV1DDXY&#xA;6nfenGZzhOxV2KuxV2KuxVKfM149vp/BDR5zwqOy0q39MwtdlMYUOrmaLHxTs9Hk/wCa9qzflR5p&#xA;ug3H0LeJRTqTJOin6ONcw+z8Vy4u5y9fkqPD3vjfNy6h6N+Vv5Q6p5ruodQ1CNrXy6jAvM1Ve4Cn&#xA;dIfY9C/Qdt8w9TqxjFD6nL02lMzZ+l9SWttb2ttFa20aw28CLHDEgoqogoqgDsAM0ZNmy7oChQeg&#xA;aP6H6Mt/QBEfHv1rX4q/TnQ6bh8MVydBqL8Q3zRmXtLsVaZlRSzGiqCWJ7AYCaSBbzfVL2TUtRlu&#xA;KEKxogPZBsM5nPlOSZk9JgxjHABb5Ngi8ryao9tyuDq92b66EhA4uUWPjHxAovFB1rvmXh10oARo&#xA;UHDy6KMyZXuWfaXqkeoRu6IycCAa9N/A7ZtNPqBkFgOtz4DjNWx384DT8rfNR8NMuf8Ak2cyGhX/&#xA;ACy+v/4F0M3ZqDYWnojaoT0EpWmUYOPfi79vc3ZuDbh7t2UZe0uxV2KqV3cx2ttJPJ9iMVPv4D6T&#xA;kMmQQiZHozxwMpABgl7eTXly88p+Jug7KOwGc7lymcrLv8WMQjQeF/m/FH/ytvyHLT959Ytl5ewv&#xA;Ep+s5s+zfpPvdb2h9Q9z6H17UHXVpFHxLEqoB8xyP68x9ZmPinycjSYh4Y82UWjl7WFz1aNSfmQM&#xA;2+M3EHydVkFSPvavWK2c7DqsbkfMKcGU1E+5cQuQ97GvL+oO2rKhHFZUKEdqirA/hmq0eY+JXe7T&#xA;WYh4d9z51/I0O/n7znLUcUlZCO9WuJCP+I5d2kdg09njcvdbC9msrlZ4juNmXsy9wc1uHKYSsOwy&#xA;4hONFnlrcR3NvHPGapIKj+n0Z0WOYlEEdXQTgYkgqmTYuxV2KuxV2Ksb84SittCDuOTkfOgH8c1X&#xA;aUvpDs+zo8ywfzjpVxrvkjW/Ltu6xTarFGkc0leCGKVZPiABO9KZjaXUjETY5uTqdP4gFHk828lf&#xA;848aFpcqXnmGYatdIaraqCtqp/ygfik+mg8QctzdoSltHZqw6GMd5bvXERI0WONQiIAqqooABsAA&#xA;M17nLhSor07060xCl6DZrCtpCIP7ngvp/wCqRtnTYgOEVyp53ITxG+atk2DsVQWttx0i8NafunH3&#xA;imUak1jl7m/TD95H3sCjQItO/c5zgD0BNq/5Y6gNavfNCXcCNHpeorZWquoJCLbRSMd/5ndj8qZu&#xA;9Jp4cAJFkum1WefGQDQD0JI0jUIihFHRVFAPoGZwAGwcIknmxD84v/JV+a/+2Zc/8mzhQu/LTTZb&#xA;XyzpjfWRJALKCNIlbkBSNN27BswdLjkJGRNjuczU5AQI1v3suzOcN2KuxVKfNH/HKb/XX9eYWv8A&#xA;7tzND/eMNzRu5QeoflT5T87NDe6u1zbX2kuHs76ymMEqVPL7VGHwsgYGlQe+bbs0+mTq+0BuERb2&#xA;qWkKWyXFxdpCOC3N5I01xIB0aWRt2Y9zmtzT4pk95djihwxARA/KOG8H1xvNvmi2a5/fG3t9Wmjh&#xA;jL/FwjSh4otaKOwzoMP0R9wdDm+s+8ub8pYrEfXU82eZ7prX98La51aaWCT0/i4SxkAOjUoy9xg1&#xA;H93L3FOD64+9D3Fol5C1q91c2STUR7uylMFxGpO7RSLurUzQ4J8MwXeZocUCEPpv5V+U/Iqyy6Kb&#xA;ia51V+d5dXc3rSPwqV3oo6yEk0qe+bDtI7RcDs8byRmap2bNPLX/AByIvm//ABI5vdD/AHQdJrf7&#xA;wppmY4rsVdirsVdirDfM7M2rOD0VVA+VK/xzRa8/vS7rRD92lOYbluxV2KtrTkKioruBiFL0WNVW&#xA;NVUcVUAKvgAOmdREUHm5GyuwodiqW+Y5RHpEwPWTii/SQT+AOYmtlWI+blaON5AwnNC7tZH538ke&#xA;RI7q+8wXY02PVJk/fLBPN6kyR8fi9BJCD6aKN+wzbdnZLBj3Or7Qx0RLvW/9DK/kn/1Mf/Tlf/8A&#xA;VDNm65jX5k/n9+Ums+QPMGk6brvr6hfWE8FrD9UvU5yOhCryeFVFT4nFXrPky0gtfKulJCKBrSB2&#xA;J3JZolqcrx4xAUGeTIZmynOWMHYq7FUp80f8cpv9dcwtf/d/FzND/eMNzRu5VY7meOKSKNysctPU&#xA;Ud6dP15KOSQBAOxYmAJBI3CvpVi17exw0+CvKQ+Cjr/TLNPi8SYDDPl4IEs8AAFBsB0GdG8+4gEE&#xA;EVB2IxKsC1OyayvZID9kGsZPdT0znM+Lw5kPQYMvHEFRluZ5Y445HLJECI1P7IPh92VynIgAnkzj&#xA;AAkgc1LIsmaeWv8AjkRfN/8AiRze6H+6Dpdb/eFNMzHEdirsVdirsVYX5kIOrzU7BAf+BGaHXH96&#xA;Xd6L+7CV5iOU7FXYqyDy5orSOt7cLSNd4UP7R/m+QzZaLS2eOXLo6/Wamhwx59WUZt3VOxV2KsY8&#xA;23qvLFaIa+n8cnzI+Efdmo7Ry2REdHa6DHQMu9j2a12CQ+cfKWh+Z9NisdYgM9vFMJ4wrtGQ4Vl+&#xA;0pB6OdsnjzSxm4sZYY5NpNaF/wA4yflRPpsU93pkzSy1cf6VcLRT9no/hvm+0spSgDLmXSaqMYzI&#xA;jyCa2v8AzjN+TlvcxTjRnkMTBxHLc3DxkqagMpejDxB2OZDjvUVVVUKoAUCgA2AAxVvFXYq7FUi8&#xA;2XSLaR23WSRgxHgq/wBua7tHIBER6lz9BjJkZdAxTNO7ZsAk0HXFWaaBpf1K05SD/SJaNJ7Dsv0Z&#xA;vtHg8OO/1F0mrz8ctuQTPMtxXYqlXmDS/rlr6kYrcQ1KeLDuv9Mw9Zp+ONj6g5ekz8EqPIsNzRO6&#xA;axVlvlS6R7Jrev7yFiaf5Lb1+/Nz2fkBhw9Q6jX4yJcXenebBwXYq7FXYqh7+9hs7Z55Tsv2V7s3&#xA;YDKs2UQjZbMWIzlQYJczyXE8k8n25GLH6e2c7OZlIk9XfwgIgAdFLIslWC2nuH9OGNpH8FFclCEp&#xA;GgLYzmIiyaZBpnlZldZb4ggbiBd9/wDKP9M2eDs/e5/J1+fXbVD5sjAAFBsB0GbR1jsVdiqH1C8j&#xA;s7SS4ffiPhXxY9BlWbKIRMi2YsZnIAMCmlkmleWQ8nclmPuc5yUjI2XoIxAFBZgSjdM0eXUrlFII&#xA;tkNZpPb+Ue5zI0+mOWX9Hq059QMcf6XRnSqqqFUUVRQAdABnQAU6Em28KHYq7FXYq0xIUkAsQKhR&#xA;1PtvgKQwLUbm4uLyWScFZCacD+yB0XOczzlKZMub0GGAjEAckPHG8jqiAs7EBVHUk5WASaDYSALL&#xA;LNH8ux2rLcXJElwN1T9lT/E5udNohD1S3LqNRrDPaPJOsz3BdirsVdiqR6x5cS4L3FrRJzu0f7LH&#xA;+BzX6nRCXqjzc/T6wx2lyYq6MjlHBVlNGU7EEZpyCDRdsDe4ROl3Nxb30Ulupd68TGP2geoy3Tzl&#xA;GYMWrPCMoEFnoJIBIoT2PbOjDz7sVdirsVSfzDpNzeokkD1aIGkB2B9x75g6zTyyCweXRzdJqIwN&#xA;Hr1Yi6OjFHUqymjKRQg5pSCDRdwCDuE20LQzet609VtlNKDYufAe2Zmk0nibn6XD1Wq4Nh9TLILa&#xA;C3jEcEaxoOyj9ebmEIxFAU6iczI2SqZNi7FXYq7FVC9sre8gMM68l6gjYg+IyvLijMUWzHllA2GI&#xA;arolzYMW/vLcn4ZR29mHbNJqNLLH5xdxg1McnkVbQ9Da9PrzVW2U026uR2Htk9JpPE3P0sNVquDY&#xA;fUy6KKOKNY41CIooqjYDN3GIAoOnlIk2V2FDsVdirsVdirsVS/VdFt79OR/d3AHwyj9TeIzG1Glj&#xA;kHdJycGpljPkhNA0N7N3nuQPXqVjA3AHdvpyjR6QwPFLm26vVce0eSd5sHBdirsVdirsVdiqR69o&#xA;T3ciT2wAmJCyg7Aj+b6M1+r0hmRKPNz9LqhAVLkjdK0e2sEqvxzkfHKevyHgMv0+mjjHm0Z9RLIf&#xA;JH5kuO7FXYq7FXYqgNT0a0vwGccJh0lXrTwPjmNn0scnPm5GHUyx8uSMhhjhiSKMcY0FFHtl8YiI&#xA;ocmmUjI2V+SYuxV2KuxV2KuxVplVlKsAykUKncEYCLSDTUUUcUaxxqERRRVHQYxiAKCykSbK7Ch2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxVD392lpbNMxAI2WvQsemVZsghG23DjM5U+fvPf5pfnbqHnXUdF/L6w&#xA;9S10SO2W/aKCKdmluo/VVmMvLiCKhQPA1wYMnHASXPj4JmKT2/mf/nL+aQq1k0KgVDSWVtQnw+FT&#xA;lzUmUvmj/nJe0smur2O4RbeMy3TiztBGAi8nO8deIpir3bybrzeYPKulay6COW+to5ZkUUUSEUcK&#xA;CWPHlXjU9MVTnFXYq7FXYq7FXYq7FXYq0zBVLNsFFSfYYCaSBaTjzLaywXBhVlmiQsiuBRu1dj2z&#xA;B/PRkDXMBzPyUgRfIoXRNduXS6+tMZfSjMynYHbqNvnlWl1ciJcW9C23U6WIMeHazSvpvmVJ1nNy&#xA;gjMS+oOFTVQaU3775Zg1wlfFtTDNojGuHe0x03VLbUI2eGqlDR0bqK9OnjmTg1EcgsONmwSxmii8&#xA;vaXYq7FXYq7FWmZVUsxooFSfYYCaSBbzP8x/+cgPJ3kW8tLG9gur69uozOYLVUrFGGKAyGRk3ZlN&#xA;AK9PlWOPIJiwynjMTRYcP+cxfJTvwj0TUy1K0Ii6f7BnybBMrf8A5yl8uTwJMmi3gR+gZkVtjToa&#xA;Yq9Z8s+YtN8x6Faa3ppY2d4paMSDi6lWKOrAEiqupU0JHgcVTPFXYq7FXYqwvXL+4u7+SHlWKJyk&#xA;SDpUbV9yc0OrzSnMjoC7vS4hCAPUsb/K20a0/Nz8zrdjVkGg8vm1jIx/Xm40+PggIupz5OOZL1jL&#xA;mpJvOpp5N14+GnXZ/wCSD4qxP8j9RvbnyJosLKv1aGzWjgGteRoK5iYs05ZJR/hDlZcUY4wf4i9F&#xA;zLcV2KuxV2KuxV2KuxV2KvmK+1rzZ5y/5yLvvJl15l1XSdChaeGGHSLprMqsFv6g6BlYsw+IsD7U&#xA;xV6Qn/OPtghqnnjzepIIJGqKNjsR/c5WMMByA+TYcszzJ+aYWP5LWlnCYk83eZnqCpd9QTkVP7JK&#xA;wrUfPGOKI5AIOSR5kqi/k3YLXj5n8wryFGpfKKjwP7rEYYD+EfJJzTPU/NL9d/KtNJ0DVNRsvNnm&#xA;SOa1tZrhFGoBVZoY2dQwWNSRUeOGOOMeQAYynKXM2lX/ADjR508w+YtF1i11i8kvzp00P1e4uGMk&#xA;3GdXLI0jEswBjqK77+FMmxezYq7FXYq7FWP+Y9aMXKxhBEm3qyeAO9B881mt1Vegc3Y6PTX6zyeW&#xA;aF5a0TWfzy1GHXdMtdTgHl6GaGK9gjuFVvrZXmFlVgD13y7QAjHv1LTrSDk26PT4vyz/AC4icPF5&#xA;U0eNx0ZdPtQd/cR5muIrH8v/ACGevlvSz/0ZW/8AzRirD/8AnH/V7V/y00Ky+L1/9LPT4f8AeuZu&#xA;vyyj8xHj4Ord4EuDj6PTsvaXYq7FUPqFz9Wsppx1RSV+fQfjlWafBAlsww4pAMEtyTcxEnfmpJPz&#xA;znYfUPe7+f0lBfl7JHJ+dP5qPGwdD+gQGU1G1i4OdNGQIsPOmJGxZ1d64ttqX1aSixjiCSDX4u9f&#xA;bMPJq+DJwnk5ePS8WPiHNR89GnkjzCfDTLw/9O75muGxf8itVt5/y38vWaoUkSxRi21G33O3zzHx&#xA;54mZhW4cieAiAl0L0TMhx3Yq7FXYq7FXYq7FUBrdzNb2Jkifg9dmAB7E9/lmNq8hjCw5OlgJTovl&#xA;78vrmS5/5y21CZ/tPJdkgdK/VGrTLMMzKAJas0BGZAfWGWtbsVdiqSeeDTyV5gPhpt5/yYfFXiH/&#xA;ADh3L6lh5pPhNZ/8RmxV9FYq7FXYq0zBVLMaACpPsMSaUB5/fXJuryWc/wC7GJA9ug/DOay5OORl&#xA;3vRYocMQEv0lVX/nIfUVUUUeVrYADoALvOjgKAefkbJeo5Ji7FXlX/ON0Fifyt0W6Vw95ILvknIE&#xA;qovZhsvUVplEccPEMr9TfKc/DA/heq5e0OxV2KoPWVU6VdBunpk/SNxlGqH7uXub9Mf3g97A8513&#xA;yUfk/wD+TT/Mz/tx/wDUJLm/0X90Pj97o9Z/en8dGc+brSkkN0Bsw9N/mN1/jmH2jj3Evg5fZ+TY&#xA;xQmt3/1r8t/MKMaywaZeI/uPq78T92ZWizccKPMONrMXBPyKR/8AOP4Vfy80ZDCokFlE3rCtSH3C&#xA;mv8ADBpyDknt15pzgjHHf4PTczXDdirsVdirsVdirsVY55vuBS3tx13kYfgv8c1faU+Ufi7Ls+HO&#xA;T5k0XVtO8n/85KXGseZJTp2mMbiRLqVHKMs1sVQrwViwLHjt3zM0v93H3OJqf7wvev8AoYT8m/8A&#xA;qZof+RVz/wBUsyGh3/Qwn5N/9TND/wAirn/qlirv+hhPyb/6maH/AJFXP/VLFUp83/nx+Ut75T1q&#xA;ztPMUMt1c2F1DbxCK4BaSSFlRamMDcnFWJ/84c6TqVt5c1/Ubi3eKzv7iBbOZxQS+iriQpXqFLgV&#xA;6V+RxV9DYq7FXYqo3yl7K4QGhaJwD81OV5RcCPItmI1Ie957nNPQpN5NuZ7n8/tXkmcu/wDhyEVP&#xA;YC72Aze6KZlCz3uk1kBGdDuew5mOK7FXi/8AzjHbxP8Al3okxlpLEt2VioakG7mUknptXNfCAOoJ&#xA;vcdPg50pkYAK2P63tGbBwXYq7FUi8xaxbLbS2cbc5n+FqbhRXep8c12t1MREwHNz9Hp5GQkeTFM0&#xA;7tkj/KW6toPzT/Mv15ki5foTjzYLWlpJWlc3+i/uh8fvdHrP70/jo9O1i502706aIXUJenKP94te&#xA;S77b9+mT1OPjxkMdPk4JgsJvVnm0nUrGFwh1C0ntCW6D1o2QMafylq5pNPnOOVu4z4RkjSv5Ckby&#xA;r5bs9Fd2vEsraOCN6cAXjUKWpVuIPhvmRi1xiZEjm4+TRCQAHRk0Hm62KL68Lq9fi4UK08dyDmRD&#xA;tGNbjdon2fK9imtpqlheMVt5Q7KKlaFTT5MBmZj1EJ/SXEyYJw+oIrLmp2KuxV2KuxVIfNOmvNEt&#xA;5GKtCOMg/wAita/RXNd2hgMhxDo7DQ5qPCerHLa8kg24pKnX05VDrXxoehzW4dRPHydhlwRyc0Ib&#xA;W1MjSehGHYliVRRud+wyuUiTZbIxA5NtBGe1PlkKZiRUhbHlufh8cHCy41eKwtrieKJoUcuyoOSg&#xA;9TTvlmMWQB1ackqBJekgAAACgGwAzp3nHYq7FXYqhtTnSCwnd2C/AwWvdiDQDKc8xGBJ7m3BEymB&#xA;5sAznHoEh8i/+T61b/wHYf8AqLGbvs/+7+Lp9f8A3nwezZnOE7FXjX/OMHo/8q30kemxlCXX7yvw&#xA;gfXZdqU75g468eW29fqczJfgR32v9b2XM5w3Yqg9XguZrCRLZyktKjjsWA6r9OUamEpQIid27Tyj&#xA;GYMuTBDWu/XOdd+1iryr8xfyLTzZ5ifW7TU/qNxcIiXMTwmUM0ahFZSHSnwqBTM/T63gjw1bhZ9H&#xA;xy4rpLbD/nDvW7lDJL5hit1/ZD2rlj9HqimbTDklMWRwusy44xNA29hstLvNJsrfS725F5eWUUcE&#xA;92AV9V0QAycSTTl165odRHhmR5u8wSuAPkrZU2OxVXsrqS1uo506oakeI7j6Rk8WQwkJBhkxicSC&#xA;z+ORJI1kQ1RwGU+x3GdLEgiw88RRorsKHYq7FXYq4gEUO4PUYqkF75ThkYvay+lXf02FV+g9Rmty&#xA;9nAm4mnYY9eRtIWkeoaRe2NDMoKE0Eimq1zX5tNPHzc/FqI5OSCyhudiqc+WLP17/wBY/Ytxy/2R&#xA;2X+uZ2gxcU7/AJrh67JwwrvZfm7dM7FXYqoX08lvaSzRx+q8a1CVp/nTK8szGJIF02YoCUgCaYPf&#xA;ahdXsvqTvWn2UGyr8hnP5c0shuTvcWGMBQQ2VNjyzz7P+Z/lrz0vmfyVZ/XBfaelhcUhE5T05TIQ&#xA;UrUV+GjfRm10GeEYkE1u6zW4ZGVgWl8P5r/85STsVh0J5GAqQunEmn0ZsI5Yy5EFwJY5R5ilcfmV&#xA;/wA5YE0/w5N/3DGyxg9t/JXyrqXlb8sdD0XVIxFqMEcsl1GCCUaeeSfgStQSgk4nfGltm+KuxV2K&#xA;sT8yaUYbkXMK1jnNGUDo5/5qzTa7T8MuIcj97t9FnuPCeY+5V0zyu8gEt8SincQj7R/1j2yWDQE7&#xA;z+THPrgNofNkNvY2duAIIUjp3A3+/rmzhijHkKdbPLKXMq2WMGE+aE9LXmr0uI0cH3AK/wDGuaHX&#xA;isvvDvNCbxe4pbmI5LsVdirN/LzFtHtydzRh9AcgZv8ARG8Q/HV0erH70pjmU4zsVdirsVdirsVU&#xA;b2FJrSaJxyDIRT3ptleWIlEgs8UjGQLz3OaeidirKfKAH1e4PfmP1Zt+zfpLq+0PqCf5snXOxV2K&#xA;uxVhev6Z9Su+SClvNVo/AHuuaHWYPDlt9Jd3pM/HHfmEJZafd3snCBOVPtMdlHzOU4sMshqIbsua&#xA;MBZZBa+UrdQDcys7d1T4V+81ObLH2dEfUXXT7Ql/CE5tbK1tI/Tt4xGvenU/Mnc5nY8UYCoinCyZ&#xA;JTNkq2WMHYq7FXYq7FXEA9cVdirsVdiqV69oianbrxIjuot4ZD0/1T7HMTV6UZY/0hycrS6k4j/R&#xA;PNh0sM0MjRTIY5UNHQ9jmjlAxNHm7qMhIWOSzIpdirLPK19HJafVDtLDUgeKsa1+gnNz2flBjw9Q&#xA;6nXYiJcXQp5mwcB2KuxV2KuxV2KtSAlGA6kGmA8kjmwr/Dus/wDLP/w6f81ZofyWXu+0O7/OYu/7&#xA;3f4c1n/ln/4dP+asfyWXu+0L+cxd/wB7IfLthc2drIlwgR3fkBUHag8M2eiwyhEiTrtZljOQMU1z&#xA;McR2KuxV2KqF7ZW95B6M4qlQwI2II8Mry4ozFFsxZTA2FSCCGCJYoUCRr0UZKEBEUOTGUjI2V+SY&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxVL9W0eDUIq7JcKPgl/g3tmNqdMMg/pORp9QcZ8mHXdlc2kvpz&#xA;oUbsexHiD3zR5MUoGpB3WPLGYsKGVs0w0WDUGvY5bRCTGfiY7JTuGPuMydLCZmDEcnH1MoCJEmcZ&#xA;0DonYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUPf&#xA;2EF7bmGYbdVYdVPiMqzYY5I0WzFlMDYSWw8qKrl7xw6gnjGlaEeJP8MwMPZ1G5lzsuv2qLIIoo4k&#xA;EcahEXoqigGbOMQBQddKRJsrsKHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWN/mP5ku/LXkXW9&#xA;ds0WS7sLV5bdZPsep9lSwHUAmtO+KvnxdW/5zNljEsSy8JByjPoaRSjCo6pXFU6sdR/5y4JRryJV&#xA;jK1ZY4LHmG8NxxxVk/5e+c/zUg8+Wnl3zuhMeqW80lqHS3RkMCl+YNuBUHiVIbFXs2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KrZJI40LyMFUdScEpACymMSTQdHIkkayIeSOAVPiD&#xA;jEgiwpBBorsKHYq7FXYqtkkSNGeRgqKKsx2AGAkAWUgEmgkV55stQskdqrtLT93IQAta0rua/hmv&#xA;y9oRoiPNz8eglsZckBpNhfanKbiadxCrUdixq3cqMxdPhnmPETs5GfNHEKA3U/zh0671L8s9f06y&#xA;j9W8u7b0baKoBZ2dQBViB9+bicxEWeTqYQMjQ5pxomsxTLb2SRnkkQVn8OCgHanjmNi1gnLhAcnL&#xA;pDCPESnWZjiPMfM70/PvyYvjp1+f+Sb4q9OxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KoPVtRWwtPWK82JCovSpO+/wB2UajP4cbbsGHxJU8z8+fmXpvl+yS/164eK3lkEUMECF2ZqVIV&#xA;ajoBUknNUJZNRKun2OzIx4I31Se3/wCcsvyntreKBY9T4oAik28e9B/xlzc44CMQB0dROfEST1TC&#xA;0/5yk/Lm8RntrbU5FQ8WPowihpXvOMmxeheTPOuh+b9IOp6Q7+kkhhmhmXhLHIADxYAsu6sCCpI+&#xA;muKp9irsVY/5tuqQxW6OPiYtKgO+w+GozWdo5NhEF2PZ8NzIhiy/aY0pvT7gM1LtSzbQ2gh0WGQs&#xA;FQBmkY+NTXN9pCI4gejo9UCcpDEPNXmWFLe71O8cx6dYxvMwpXjHGpZmoOrEDNXmyyzTofB2WHFH&#xA;FCz8WYaDp9vbWMUyCss6K7uevxAGg9s2+n08cY83V59Qch8kyzIcd5V5qan/ADkN5JXx03UD/wAI&#xA;+KvVcVdiqFn1TToGKy3CKw6rWpH0CuUz1EI8yG2GCcuQQh8zaQGoJGI/mCNT8d8pOuxd7d+SydyY&#xA;291b3EYkgkEiHuP4jMmGSMhYNuPOEomiFTJsHYq7FUHeavp9oeM0o5/yL8Tfh0yjLqYQ5lux6ec+&#xA;QUYvMekPt63A+DKw/GlMrjrcR6tktHkHRGwXVtcKWglWQDrxINPnmRDJGXI20ThKPMUq5Ng7FXYq&#xA;7FXYq7FXYqxDzNqH1i89BD+6t6qfd/2vu6ZpNdm4p8I5RdzosPDGzzLzrz/5e0jXPM35b6Vq1ut3&#xA;p19f6l9Zt2LKGC2ykAlSrdUB2OZ3Z4rH7y4WuN5PgzKP/nH78no5FkTy3CroQysJbjYjcH+9zNcN&#xA;Gn8mPyxPXQov+Rk//VTFWMfl61p5a1XzXZaZbLHZRaw8KQVY8UjgiKhWJJ/bPXNfqdXLHMDmKc7T&#xA;aWOSBPW3q1ndR3VtHcRghZBUA9RQ0zMxZBOIkOriZIGEjEq2WMGCa1HKmq3PqV5M5ZT4qd1/DOd1&#xA;USMkr73f6Yg4xSCyhuVPXm9H0fUb0a8vTqeNfGmS4zVXsjhF3W6Q/mPZcvyp82XbDaOyZI/9Ystf&#xA;w/Xmw7OxWTLucDX5aAj3vWdL/wCOZaf8YY/+IDNu6pbDqtlNcm3icu425KCVqO3LplEdRCUuEFul&#xA;gmI8RDzfzNC0n/OQ/kxwQBDpOoO1e4IKbfS2XtL1PFUo8xat9TgEELUuZhtTqqd2/gMwtbqOCND6&#xA;i5mj0/GbP0hilrbvc3McCH45GCgn375pscDOQA6u3nMRiT3Jf+cWop5F/L681yzT61qSvFBber/d&#xA;B5XpyZVoaKtTSvXNvHs6Fb26o6+d7Ux38q4/ze80eTrDzRZ+ZdPsV1ETAW0mnGUoIZ3hPxeso+Ix&#xA;V+zmRi08MfJx8ueU+bMR5b/OwsOfnLTuFfi4aUA1PYtK4/DL2lX/AMNfm1/1Odv/ANw2H+uKtN5Z&#xA;/Num3nO3H/bth/riryvz75m87eQvN+lWWqanDrdteIk00Qt1t6xtKY2UMpLBvhqD09jmJLRYz0cq&#xA;OsyDq9r1fy1BBbPcWrt+7HJ423270OYmp0IjEyj0crT60ylwy6pLZXs1ncLPD9peq9mHcHMDFlMJ&#xA;cQc7LiE40Wd2t1DdW6XEJ5RyCo8fkfcZ0WOYnEEci6CcDEkHmq5Ng7FXYq7FXYq7FXnt3KJbuaUd&#xA;JJGYfSSc5nJK5E95ejxxqIHkw3Wmb/la/wCXS1PD63fHj2r9UpXNh2ad5OB2iNovdM2zq3Yq8m8s&#xA;LLD5o80yMiOk+uzFUdQ6lRDAnQ9PiU5qdXP98OuwdppY/uj8XrIAUAKKAbADpm2AdXbsVY55vhj4&#xA;281P3hJQnxHX8M1faURsersuz5HcdGNZqnZuxVAfmPcQn8l/NcAIEq2rsV7kFk3zcdnTHAY9XU6+&#xA;B4r6MvutdiTRbW2tJA8kkEYeRCCFXgK7jucOt1XCOGPNdHpuI8R5LfLL20TPNcXEUajaNHdVap6m&#xA;hPhlfZ+I/UeXRs1+UfSObF9Zubef/nIHysYJUlA0a/BKMGp8a+GbR1j0HXdSewtA8YBlkPFCeg2q&#xA;TTMXV5zjjY5lydLhGSVHkGFSySSytNK5klf7Tsak5oZSMjZ5u7jEAUOSZ+WYvU1ZG7Rqzn7uP/G2&#xA;ZegjeQeTi62VYz5sP/5yxYr+T9yR1+u2v/Ezm9dKmv8AzjQa/kl5bP8AzGf9R8+KvTsVdirsVfLv&#xA;/OVM3D8wvLq+NnH/ANRL4q+nrmL1beWL/fiMv/BCmRnG4kd7KEqkC87zmHo0Zpmp3Ony8omJiY1k&#xA;hJ+E+/sffL8GoljO3Luac+COQb8+9nUbrJGrr9lwGHyIrnQxNi3QkUaXYUOxV2KuxVBazeLaafLJ&#xA;WjsOEf8ArNt+HXMfU5eCBLfpsfHMBgmc875iWt/+TX/Ln/mLvv8AqFzZ9m85Ou7R5B7rm2dW7FXk&#xA;vldK+Z/NJs+U1yNeneWMAni6xQ0Hy48T9OajV8XjChvs7XS8Pgmztu9azbuqdirFvN81bmCHsiF/&#xA;pY0/41zUdpS9QDtez4+klIM1rsHYqtliiljaOVFkjcUdGAKkHsQcQaUi0RYWMl1PHawALXYGnwqo&#xA;70FNhlmLGZyADXlyCEbLzHV/+cQb3VtTutTvvOvqXd5I00z/AKN25Ma0A+t7AdAOwzo4RERQdBKR&#xA;kbLL/wAof+cdbD8vfME2uy6y+r3hga3tl+ri2SMSEF2I9SYsxC0G4pv17SYs884SfFax+Adj9NAM&#xA;1XaR+kOz7OHMsczVuyT/AMo+n9anJYCTgAi9yK1NPuGbHs2uI97r+0L4R3MI/wCcq42f8obqillW&#xA;8tS+1QBzpU/SQM3DqkX/AM43X9jF+S/l2OW4ijdfrlUZ1Uit9OehOKvTP0ppn/LXD/yMT+uKu/Sm&#xA;mf8ALXD/AMjE/rirv0ppn/LXD/yMT+uKvlj/AJyquIrn8yvLK20izVtIl/dkP8Run2+Gu+KvrAkA&#xA;VOwHU4q89vBGLycRkNH6jcGHQippnM5a4jXK3osd8IvuUcgzZ5o8nqaXbN/xWF/4Hb+GdFppXjj7&#xA;nQagVkPvRmXtLsVdiqWaxrcen0jEZkncVUdFA6bnMTU6oY9qsuVp9Kcm97MTvtRu72TncPyp9lRs&#xA;q/IZpsuaWQ3J2+LDGAoIbKmxiWt1/wCVsfl14fWr7/qFObPs3nL4Ov7R5Re65tnVOxV5l+XFmLnz&#xA;b51nBCfVPME3OnVy1tARmLPTmWUTvk5MM9YzCub03MpxnYqwbW7tbrUppENYwQiHxC7V+/Oe1WTj&#xA;yEjk77S4+GABQGY7e7FVS3t5riVYoULyN0UZKEDI0ObGcxEWWZaLoyafGWY87iQUduwH8ozeaXSj&#xA;GP6RdNqdSch8kyzLcVxIAqdgOpxVhOv36XmoFozWKMBEbxoSSfvOaDWZhOe3IO80mIwhvzKW5iuS&#xA;2rMpDKSGG4I2IxBpSEXdalJfadNpupQw6jY3C8Jre6jEqOvgwPXx3zLhrskR3+9xZ6LGfJh8P5Q+&#xA;QrqX9z5atWqd+ERIX7q4Y6jNM7E/JEtPhiNwGS6V+R35aGEi98rWRYU4ScGBIPiobambXTnJXrdZ&#xA;qBC/Qjf+VGflH/1K9l/wLf8ANWZDQkWr/kj5CWVzbeVrNIV+wscbOWHiTU/dmu1Ms1+nk5+njhr1&#xA;c0LonkTyXoGpx6hZeX7KK/t25wSyQ8mjcdHWp+Fh2PbMOOtyxO/2uWdHjly+xk17q9/ebTSnh/vt&#xA;fhX7h1+nKsupnPmW3Hp4Q5BBZQ3OxVlfla/je1+psaSxElB4qTXb5E5uOz8wMeDqHU67ERLi6FPc&#xA;2LgOxV2KpV5jsPrNgZFH723q6+6/tD+OYeuw8cL6hy9Hl4Z10LDM0TunYq8//NT/ABnp175c81+V&#xA;tLOq3Wg3E7yQCKWdR9YiEas8cJVyvXoetM2XZp3Lr+0BsEi/6GG/5yF/6kqH/uGal/1Xzbuqd/0M&#xA;N/zkL/1JUP8A3DNS/wCq+KvUf+cfl823Wja/r/mjTjpeoa9qj3i2pjkh+D0Y4+SxylnVSUNORxV6&#xA;piqReZNXMCGzhNJZB+8b+VT2Huc12u1PCOEcy5+i0/EeI8mKZp3bOxVNLLy7qNyFcqIYzvyfY09l&#xA;65l4tFknvyDi5NZCO3Mso03S7awi4xDlI325T1P9B7Zt8GnjjG3N1WbPLId0Zl7S7FWJ67rz3Ba1&#xA;t6pCDSRjszU7U7DNNq9WZemPJ2+l0vD6pc0jzXuc7FVW3tbi4fhBG0jeCj9fhk4Y5SNAWxnOMRZN&#xA;Mk0zytHGVlvSJGG4hH2f9ke+bTB2eBvPfydbm1xO0fmnyIiKFRQqjooFAM2IAHJ15JPNvCh2KuxV&#xA;Qu7G1u4yk8Ycdm/aHyOV5MUZipBsx5ZQNgsY1HyzdW9XtqzxeAHxj6O/0ZqM+hlHeO4dph1sZbS2&#xA;KTEEEgihHUHMFzWsVXxSyRSLJGxR1NVYdQcMZEGwiUQRRZhoetC/QxyLxuIxViB8LDpX2+WbzSar&#xA;xBR+oOm1Wm8M2ORTXMxxHYq4gEUPTFWNr5UL30pd+FmGrHx3Yg709qdM1Q7PuZv6XZnX1Afzk5g0&#xA;nTYE4pbofEsAxP0muZ8NPjiNgHClqJyO5RSIiLxRQqjoAKD8MtAA5NRJPNvCh2KuxV2KoTUtLtr+&#xA;LhKKOP7uQdVP9PbKM+COQUW7DnljNhhmoadc2M3pzLsfsOPssPbNFmwSxmi7rFmjkFhNvLuieqVv&#xA;Llf3Y3hQ/tH+Y+2Zui0t+uXLo4ms1NemPPqyjNu6p2KuxV2KpJr+hfWQbq2X/SAPjQftj+ua/WaT&#xA;j9Ufq+9ztJquH0y5MbsrC5vJxDCtW/aJ2CjxOarFhlOVB2eXLGAssrtPLmmwxqJIxNIPtO9dz/q1&#xA;pm6x6LHEbiy6jJrJyOxoJlHFFEoSNFRB0VQAPwzKjEAUHGlIncrsKHYq7FXYq7FXYq7FVC4sbO4/&#xA;v4UkPiQK/f1yueKMuYtshllHkUl1byzGY/VsF4uv2oakhv8AVr3zA1GgFXD5Obp9abqfzSCzsLm7&#xA;uRbxKedfirsFA6ls1uPDKcuEOwyZYwjZZvp+nwWNuIohv1dz1Y+Jzf4cIxxoOjzZjkNlE5c1OxV2&#xA;KuxV2KuxV2KuxV2KuxV2KqdxbQXMfpzoJErWh8RkJwjIURbKEzE2CqAAAACgGwAybF2KuxV2KuxV&#xA;2KrI4Yoy5jQKXPJyBSp8TkREDkyMiea/JMXYq7FXYq7FXYq7FXYq7FXYq7FViwxJI8ioFeSnNgNz&#xA;TpXIiIBvvZGRIpfkmLsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVf//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:F418DE2A97A6E3118B0FED9A754142E4</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:F418DE2A97A6E3118B0FED9A754142E4</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:4A7427A048A4E311AB61AF967F0DD369</stRef:instanceID>
            <stRef:documentID>xmp.did:4A7427A048A4E311AB61AF967F0DD369</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:05613E345899E311BDD1DF95917C168B</stEvt:instanceID>
                  <stEvt:when>2014-02-19T16:32:28+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:78164C25C29CE311B5E9B255B79271E3</stEvt:instanceID>
                  <stEvt:when>2014-02-23T23:39:01+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0AB49DA2429DE311BADDE7C9B249735E</stEvt:instanceID>
                  <stEvt:when>2014-02-25T14:44:54+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:487427A048A4E311AB61AF967F0DD369</stEvt:instanceID>
                  <stEvt:when>2014-03-07T11:36:19+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4A7427A048A4E311AB61AF967F0DD369</stEvt:instanceID>
                  <stEvt:when>2014-03-07T11:45:51+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F418DE2A97A6E3118B0FED9A754142E4</stEvt:instanceID>
                  <stEvt:when>2014-03-08T11:56:34+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Р‘РµР»С‹Р№</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Р§РµСЂРЅС‹Р№</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
219.497 63.5854 mo
218.958 64.6167 219.042 66.189 219.681 67.0796 cv
219.681 67.0796 221.712 69.8999 227.115 67.1147 cv
232.521 64.3296 231.125 60.5024 230.096 60.2368 cv
224.174 58.7114 li
223.147 58.4458 221.864 59.0728 221.321 60.104 cv
219.497 63.5854 li
cp
.968627 .745098 .537255 rgb
f
223.577 75.2017 mo
223.036 76.2329 223.118 77.8042 223.761 78.6948 cv
223.761 78.6948 225.451 81.0483 230.289 78.5562 cv
235.127 76.064 233.791 72.6177 232.76 72.3521 cv
227.855 71.0884 li
226.826 70.8228 225.539 68.9688 225 70 cv
223.577 75.2017 li
cp
f
221.503 85.4136 mo
220.964 86.4438 221.044 88.0161 221.687 88.9067 cv
221.687 88.9067 223.028 90.771 227.27 88.5864 cv
231.514 86.4009 230.234 83.3501 229.205 83.0845 cv
225.365 82.0962 li
224.336 81.8315 223.052 82.4565 222.513 83.4888 cv
221.503 85.4136 li
cp
f
206.325 77.2837 mo
206.325 77.2837 203.503 115.645 188.257 125.168 cv
178.261 131.414 182.624 116.404 182.624 116.404 cv
180.897 79.1626 li
206.325 77.2837 li
cp
.956863 .690196 .470588 rgb
f
164.671 117.696 mo
166.97 73.8267 li
167.155 70.8745 168.741 66.5093 170.493 64.1255 cv
178.825 46.188 li
180.577 43.8042 185.597 42.1353 188.257 40.8413 cv
193.3 42.1987 li
195.962 40.9048 197.983 42.2622 197.796 45.2144 cv
196.704 62.3296 li
196.515 65.2817 195.358 69.8999 194.134 72.5933 cv
188.257 85.5093 li
187.032 88.2026 185.8 92.8159 185.521 95.7612 cv
184.544 106.055 li
184.263 109 181.669 111.92 178.776 112.544 cv
164.671 117.696 li
cp
f
225.684 96.3882 mo
225.684 99.6021 223.415 102.233 220.64 102.233 cv
190.624 102.233 li
187.851 102.233 185.579 99.6021 185.579 96.3882 cv
185.579 34.7417 li
185.579 31.5269 187.851 28.896 190.624 28.896 cv
220.64 28.896 li
223.415 28.896 225.684 31.5269 225.684 34.7417 cv
225.684 96.3882 li
cp
.0862745 .0862745 .0862745 rgb
f
220.64 28.896 mo
202.856 28.896 li
205.212 36.4653 li
222.37 36.4653 li
222.37 65.2798 li
225.684 75.9292 li
225.684 34.7417 li
225.684 31.5269 223.415 28.896 220.64 28.896 cv
cp
level3{
gsave
clp
[16.7125 35.0019 -35.0019 16.7125 211.823 27.2617 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.32549 .32549 .32549 ]
/C1 [.0862745 .0862745 .0862745 ]
/N 1 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[16.7125 35.0019 -35.0019 16.7125 211.823 27.2617 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~;c6Lk;Gg:g;,C(c:esk_:JOY[:/+GW9he;T9MA)P91qlL8kMZH8P)HD84Z9A7n6'=7Rfj977BX56psF1
6UO4.6:+"*5s[e&5X7S"5<h@s5!D.o5!;%l4Zkhh4?GVd4$#D`3]T2\3B9&Y3&iiU2`EWQ2E!EM2)R3I
1c.$F1G^gB1,:U>0ekC:0JG160/"t3/hSb//M/P+/1`>'.k<,#.Olnt.Oceq.4?Sm-mpAi-RL/e-7'ra
,paf^,U=TZ,9nBV+sJ0R+X%sN+<VdK+!2RG*Zc@C*??.?*#oq;)]K_8)B'M4)&X;0(`4),(Ddl(()@Z$
~>
<~;c6Lk;Gg:g;,C(c:esk_:JOY[:/+GW9he;T9MA)P91qlL8kMZH8P)HD84Z9A7n6'=7Rfj977BX56psF1
6UO4.6:+"*5s[e&5X7S"5<h@s5!D.o5!;%l4Zkhh4?GVd4$#D`3]T2\3B9&Y3&iiU2`EWQ2E!EM2)R3I
1c.$F1G^gB1,:U>0ekC:0JG160/"t3/hSb//M/P+/1`>'.k<,#.Olnt.Oceq.4?Sm-mpAi-RL/e-7'ra
,paf^,U=TZ,9nBV+sJ0R+X%sN+<VdK+!2RG*Zc@C*??.?*#oq;)]K_8)B'M4)&X;0(`4),(Ddl(()@Z$
~>
<~;c6Lk;Gg:g;,C(c:esk_:JOY[:/+GW9he;T9MA)P91qlL8kMZH8P)HD84Z9A7n6'=7Rfj977BX56psF1
6UO4.6:+"*5s[e&5X7S"5<h@s5!D.o5!;%l4Zkhh4?GVd4$#D`3]T2\3B9&Y3&iiU2`EWQ2E!EM2)R3I
1c.$F1G^gB1,:U>0ekC:0JG160/"t3/hSb//M/P+/1`>'.k<,#.Olnt.Oceq.4?Sm-mpAi-RL/e-7'ra
,paf^,U=TZ,9nBV+sJ0R+X%sN+<VdK+!2RG*Zc@C*??.?*#oq;)]K_8)B'M4)&X;0(`4),(Ddl(()@Z$
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
222.37 94.6636 mo
188.894 94.6636 li
188.894 36.4653 li
222.37 36.4653 li
222.37 94.6636 li
cp
1 1 1 rgb
f
211.614 31.7437 mo
211.614 32.2515 211.259 32.6636 210.819 32.6636 cv
201.478 32.6636 li
201.038 32.6636 200.683 32.2515 200.683 31.7437 cv
200.683 31.7437 li
200.683 31.2349 201.038 30.8228 201.478 30.8228 cv
210.819 30.8228 li
211.259 30.8228 211.614 31.2349 211.614 31.7437 cv
211.614 31.7437 li
cp
.0862745 .0862745 .0862745 rgb
f
201.478 31.0728 mo
201.177 31.0728 200.933 31.3735 200.933 31.7437 cv
200.933 32.1133 201.177 32.4136 201.478 32.4136 cv
210.819 32.4136 li
211.12 32.4136 211.364 32.1133 211.364 31.7437 cv
211.364 31.3735 211.12 31.0728 210.819 31.0728 cv
201.478 31.0728 li
cp
210.819 32.9136 mo
201.478 32.9136 li
200.901 32.9136 200.433 32.3887 200.433 31.7437 cv
200.433 31.0981 200.901 30.5728 201.478 30.5728 cv
210.819 30.5728 li
211.396 30.5728 211.864 31.0981 211.864 31.7437 cv
211.864 32.3887 211.396 32.9136 210.819 32.9136 cv
cp
0 0 0 rgb
f
203.415 66.2651 mo
203.413 66.2554 203.407 66.2466 203.405 66.2378 cv
203.362 66.0981 203.31 65.9634 203.239 65.8364 cv
203.224 65.8042 203.198 65.7778 203.179 65.7466 cv
203.116 65.646 203.054 65.5454 202.976 65.4546 cv
202.929 65.4019 202.87 65.3589 202.819 65.3101 cv
202.755 65.2505 202.696 65.186 202.626 65.1333 cv
202.536 65.0669 202.433 65.0151 202.331 64.9614 cv
202.284 64.937 202.243 64.9048 202.194 64.8833 cv
202.038 64.813 201.87 64.7573 201.69 64.7183 cv
198.72 64.0728 li
198.468 64.0181 198.185 63.9487 197.89 63.8735 cv
197.847 63.8628 197.804 63.8521 197.761 63.8403 cv
197.458 63.7622 197.144 63.6772 196.821 63.5854 cv
196.821 63.5874 li
195.671 63.2612 194.444 62.8667 193.583 62.5337 cv
193.583 62.5337 188.937 60.7417 187.397 61.5405 cv
181.905 64.3931 172.093 74.8491 172.093 74.8491 cv
171.079 75.9263 169.905 77.9692 169.483 79.3862 cv
161.415 106.46 li
149.263 127.786 li
170.124 143.292 li
171.429 141.208 172.628 139.332 173.462 138.12 cv
175.78 134.753 185.019 127.625 187.587 125.675 cv
187.831 125.537 188.062 125.375 188.257 125.168 cv
188.257 125.168 189.562 123.798 190.87 114.578 cv
194.009 92.4907 184.774 83.9194 184.774 83.9194 cv
183.688 82.9126 183.397 81.0347 184.122 79.7456 cv
187.534 73.6909 li
188.259 72.4019 190.056 71.4937 191.522 71.6724 cv
191.522 71.6724 197.499 72.3999 200.173 70.6753 cv
202.862 68.939 203.321 67.7876 203.321 67.7876 cv
203.329 67.7681 203.331 67.7495 203.337 67.73 cv
203.339 67.73 li
203.345 67.7124 203.347 67.6958 203.353 67.6782 cv
203.405 67.5259 203.448 67.3745 203.472 67.2251 cv
203.472 67.2222 203.472 67.2202 203.472 67.2173 cv
203.521 66.8862 203.501 66.564 203.415 66.2651 cv
cp
.968627 .745098 .537255 rgb
f
197.808 65.5645 mo
199.167 66 201.833 66.167 201.833 66.167 cv
201.833 66.167 202.875 66.4624 201.713 64.7256 cv
201.705 64.7241 201.699 64.7202 201.69 64.7183 cv
198.72 64.0728 li
198.468 64.0181 198.185 63.9487 197.89 63.8735 cv
197.847 63.8628 197.804 63.8521 197.761 63.8403 cv
197.458 63.7622 197.144 63.6772 196.821 63.5854 cv
196.821 63.5874 li
196.635 63.5347 196.446 63.478 196.258 63.4219 cv
196.479 64.1841 196.941 65.2861 197.808 65.5645 cv
cp
1 .843137 .713726 rgb
f
382.195 34.8667 mo
385.41 34.8667 388.041 37.1362 388.041 39.9126 cv
388.041 69.9263 li
388.041 72.6997 385.41 74.9712 382.195 74.9712 cv
320.549 74.9712 li
317.334 74.9712 314.705 72.6997 314.705 69.9263 cv
314.705 39.9126 li
314.705 37.1362 317.334 34.8667 320.549 34.8667 cv
382.195 34.8667 li
cp
.0862745 .0862745 .0862745 rgb
f
388.041 69.9263 mo
388.041 39.9126 li
388.041 37.1362 385.41 34.8667 382.195 34.8667 cv
342.758 34.8667 li
387.838 71.2192 li
387.965 70.8062 388.041 70.3735 388.041 69.9263 cv
cp
level3{
gsave
clp
[23.1528 22.9814 -22.9814 23.1528 364.837 35.8921 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[23.1528 22.9814 -22.9814 23.1528 364.837 35.8921 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
380.473 38.1821 mo
380.473 71.6567 li
322.273 71.6567 li
322.273 38.1821 li
380.473 38.1821 li
cp
1 1 1 rgb
f
317.549 48.938 mo
318.057 48.938 318.469 49.2925 318.469 49.7319 cv
318.469 59.0737 li
318.469 59.5142 318.057 59.8696 317.549 59.8696 cv
317.549 59.8696 li
317.041 59.8696 316.629 59.5142 316.629 59.0737 cv
316.629 49.7319 li
316.629 49.2925 317.041 48.938 317.549 48.938 cv
317.549 48.938 li
cp
.0862745 .0862745 .0862745 rgb
f
317.549 49.188 mo
317.18 49.188 316.879 49.4321 316.879 49.7319 cv
316.879 59.0737 li
316.879 59.3745 317.18 59.6196 317.549 59.6196 cv
317.918 59.6196 318.219 59.3745 318.219 59.0737 cv
318.219 49.7319 li
318.219 49.4321 317.918 49.188 317.549 49.188 cv
cp
317.549 60.1196 mo
316.903 60.1196 316.379 59.6504 316.379 59.0737 cv
316.379 49.7319 li
316.379 49.1563 316.903 48.688 317.549 48.688 cv
318.194 48.688 318.719 49.1563 318.719 49.7319 cv
318.719 59.0737 li
318.719 59.6504 318.194 60.1196 317.549 60.1196 cv
cp
0 0 0 rgb
f
335.041 54.4038 mo
330.107 53.6743 328.201 60.7554 327.342 64.7358 cv
327.014 66.2632 326.203 71.3433 326.109 72.9702 cv
325.627 81.3413 320.783 86.771 318.469 87.8188 cv
315.283 89.2622 315.719 82.1597 315.66 81.8647 cv
315.348 80.2427 314.826 49.0894 314.826 49.0894 cv
314.826 38.7729 li
313.107 38.1812 311.516 39.1001 310.566 39.3745 cv
305.652 40.7993 305.58 49.269 303.121 53.6519 cv
301.344 56.8159 292.65 65.9028 291.488 71.0483 cv
290.49 75.4663 291.689 98.647 290.936 103.472 cv
290.057 109.119 280.037 122.456 280.037 122.456 cv
298.576 137.322 li
298.576 137.322 307.742 121.953 314.705 118.809 cv
317.549 117.525 322.631 112.13 325.285 107.955 cv
330.143 100.311 338.893 87.9087 339.176 78.2495 cv
339.238 76.1294 338.137 69.4146 338.49 66.5835 cv
338.709 65.4175 338.314 54.8882 335.041 54.4038 cv
cp
.968627 .745098 .537255 rgb
f
334.969 55.2251 mo
331.857 55.019 331.721 58.0112 331.721 58.0112 cv
331.721 58.0112 331.23 60.8159 331.973 61.6343 cv
332.555 62.2749 334.418 62.0005 336.639 62.0112 cv
338.545 62.019 338.371 62.4839 338.371 62.4839 cv
338.135 60.0942 337.619 57.271 336.629 55.6685 cv
334.969 55.2251 li
cp
1 .843137 .713726 rgb
f
367.793 54.4038 mo
372.727 53.6743 374.633 60.7554 375.492 64.7358 cv
375.82 66.2632 376.631 71.3433 376.725 72.9702 cv
377.207 81.3413 382.051 86.771 384.365 87.8188 cv
387.551 89.2622 387.115 82.1597 387.174 81.8647 cv
387.486 80.2427 388.008 49.0894 388.008 49.0894 cv
388.008 38.7729 li
389.727 38.1812 391.318 39.1001 392.268 39.3745 cv
397.182 40.7993 397.254 49.269 399.713 53.6519 cv
401.49 56.8159 410.184 65.9028 411.346 71.0483 cv
412.344 75.4663 411.145 98.647 411.898 103.472 cv
412.777 109.119 422.797 122.456 422.797 122.456 cv
404.258 137.322 li
404.258 137.322 395.092 121.953 388.129 118.809 cv
385.285 117.525 380.203 112.13 377.549 107.955 cv
372.691 100.311 363.941 87.9087 363.658 78.2495 cv
363.596 76.1294 364.697 69.4146 364.344 66.5835 cv
364.125 65.4175 364.52 54.8882 367.793 54.4038 cv
cp
.968627 .745098 .537255 rgb
f
367.865 55.2251 mo
370.977 55.019 371.113 58.0112 371.113 58.0112 cv
371.113 58.0112 371.604 60.8159 370.861 61.6343 cv
370.279 62.2749 368.416 62.0005 366.195 62.0112 cv
364.289 62.019 364.463 62.4839 364.463 62.4839 cv
364.699 60.0942 365.215 57.271 366.205 55.6685 cv
367.865 55.2251 li
cp
1 .843137 .713726 rgb
f
234.381 366.592 mo
234.381 369.807 232.111 372.438 229.336 372.438 cv
199.321 372.438 li
196.546 372.438 194.275 369.807 194.275 366.592 cv
194.275 304.945 li
194.275 301.73 196.546 299.102 199.321 299.102 cv
229.336 299.102 li
232.111 299.102 234.381 301.73 234.381 304.945 cv
234.381 366.592 li
cp
.0862745 .0862745 .0862745 rgb
f
229.336 299.102 mo
211.552 299.102 li
213.908 306.67 li
231.066 306.67 li
231.066 335.484 li
234.381 346.133 li
234.381 304.945 li
234.381 301.73 232.111 299.102 229.336 299.102 cv
cp
level3{
gsave
clp
[16.7118 35.0006 -35.0006 16.7118 220.521 297.467 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[16.7118 35.0006 -35.0006 16.7118 220.521 297.467 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
231.066 364.867 mo
197.59 364.867 li
197.59 306.67 li
231.066 306.67 li
231.066 364.867 li
cp
1 1 1 rgb
f
220.31 301.947 mo
220.31 302.457 219.954 302.867 219.516 302.867 cv
210.173 302.867 li
209.733 302.867 209.378 302.457 209.378 301.947 cv
209.378 301.947 li
209.378 301.439 209.733 301.027 210.173 301.027 cv
219.516 301.027 li
219.954 301.027 220.31 301.439 220.31 301.947 cv
220.31 301.947 li
cp
.0862745 .0862745 .0862745 rgb
f
210.173 301.277 mo
209.873 301.277 209.628 301.578 209.628 301.947 cv
209.628 302.316 209.873 302.617 210.173 302.617 cv
219.516 302.617 li
219.815 302.617 220.06 302.316 220.06 301.947 cv
220.06 301.578 219.815 301.277 219.516 301.277 cv
210.173 301.277 li
cp
219.516 303.117 mo
210.173 303.117 li
209.597 303.117 209.128 302.593 209.128 301.947 cv
209.128 301.302 209.597 300.777 210.173 300.777 cv
219.516 300.777 li
220.091 300.777 220.56 301.302 220.56 301.947 cv
220.56 302.593 220.091 303.117 219.516 303.117 cv
cp
0 0 0 rgb
f
222.329 348.939 mo
222.304 348.932 222.306 348.932 222.329 348.939 cv
222.329 348.939 li
cp
.968627 .745098 .537255 rgb
f
222.329 348.939 mo
222.394 348.963 222.61 349.037 222.831 349.115 cv
222.831 349.115 222.831 349.115 222.833 349.115 cv
222.517 349.006 222.372 348.955 222.329 348.939 cv
cp
f
222.833 349.115 mo
222.833 349.115 222.833 349.115 222.833 349.117 cv
223.292 349.277 223.749 349.438 222.833 349.115 cv
cp
f
222.833 349.115 mo
222.831 349.115 222.831 349.115 222.831 349.115 cv
222.831 349.115 222.833 349.115 222.833 349.117 cv
222.833 349.115 222.833 349.115 222.833 349.115 cv
cp
f
146.067 339.459 mo
147.001 341.162 153.073 351.477 153.073 351.477 cv
149.337 342.25 li
149.337 342.25 148.709 339.59 148.39 335.283 cv
148.413 335.605 148.431 335.807 148.431 335.807 cv
148.431 335.807 146.757 336.217 145.661 336.684 cv
145.624 337.732 145.702 338.795 146.067 339.459 cv
cp
.956863 .690196 .470588 rgb
f
156.811 333.424 mo
161.481 344.525 li
161.481 344.525 161.948 341.936 160.704 337.174 cv
159.458 332.412 160.704 328.168 160.704 328.168 cv
165.015 318.328 li
165.015 318.33 165.009 318.342 165.009 318.342 cv
165.009 318.342 162.688 318.082 161.529 318.074 cv
160.677 319.887 159.707 321.936 158.835 323.742 cv
156.655 328.252 156.811 333.424 156.811 333.424 cv
cp
f
219.876 347.781 mo
219.876 347.779 219.874 347.779 219.874 347.779 cv
215.769 346.346 211.717 349.977 209.595 353.703 cv
208.354 355.883 207.12 357.25 205.908 358.826 cv
204.329 360.875 200.05 365.609 197.433 366.479 cv
193.925 367.645 189.806 364.689 188.36 361.652 cv
185.836 356.342 187.696 350.217 189.99 345.244 cv
192.446 339.916 194.527 333.48 199.048 329.496 cv
200.624 327.996 202.411 326.707 203.954 325.174 cv
206.511 322.92 208.956 315.396 202.896 316.867 cv
202.812 316.887 202.725 316.918 202.641 316.939 cv
201.247 317.313 199.79 317.969 198.337 318.803 cv
194.624 320.934 190.937 324.201 188.413 326.74 cv
184.894 330.277 182.655 335.986 178.541 338.783 cv
171.751 343.4 170.325 331.232 171.603 328.168 cv
172.138 326.885 173.463 321.379 174.873 319.547 cv
176.636 317.25 178.601 317.057 180.012 316.096 cv
181.567 315.035 182.772 313.301 182.965 312.08 cv
183.311 309.873 180.33 309.436 176.999 309.938 cv
173.184 310.514 169.818 311.555 167.14 314.539 cv
166.403 315.357 165.077 318.195 165.015 318.328 cv
160.704 328.168 li
160.704 328.168 159.458 332.412 160.704 337.174 cv
161.948 341.936 161.481 344.525 161.481 344.525 cv
156.811 333.424 li
156.811 333.424 156.655 328.252 158.835 323.742 cv
159.707 321.936 160.677 319.887 161.529 318.074 cv
161.344 318.07 161.187 318.076 161.075 318.088 cv
155.789 318.709 149.687 324.27 148.457 329.475 cv
148.122 330.893 148.302 334.043 148.39 335.283 cv
148.709 339.59 149.337 342.25 149.337 342.25 cv
153.073 351.477 li
153.073 351.477 147.001 341.162 146.067 339.459 cv
145.702 338.795 145.624 337.732 145.661 336.684 cv
145.28 336.846 144.968 337.014 144.821 337.174 cv
142.673 339.525 141.995 342.328 143.036 345.785 cv
144.716 351.363 149.379 355.256 148.95 361.527 cv
148.651 365.918 147.294 370.414 146.458 374.723 cv
145.604 379.113 145.217 384 143.632 388.213 cv
141.839 392.984 137.178 398.33 130.649 406.443 cv
143.861 417.391 153.073 425.109 153.073 425.109 cv
153.073 425.109 164.309 412.506 168.024 408.125 cv
172.271 403.121 178.742 403.658 183.954 399.789 cv
187.893 396.863 196.571 389.09 200.433 386.063 cv
204.413 382.936 204.558 381.154 207.206 376.961 cv
209.884 372.723 212.978 367.102 215.511 362.777 cv
216.167 361.66 217.818 360.152 219.383 357.047 cv
219.379 357.049 li
219.379 357.049 219.371 355.135 217.875 354.381 cv
215.321 353.098 215.995 351.813 216.329 351.477 cv
217.062 350.74 217.854 349.299 218.665 349.17 cv
219.647 349.014 220.662 349.918 221.451 351.348 cv
221.699 349.631 221.329 348.291 219.876 347.781 cv
cp
.968627 .745098 .537255 rgb
f
218.665 349.17 mo
217.854 349.299 216.868 350.984 216.329 351.477 cv
215.979 351.797 215.321 353.098 217.875 354.381 cv
219.371 355.135 219.379 357.049 219.379 357.049 cv
219.383 357.047 li
220.375 355.07 221.208 353.027 221.451 351.348 cv
220.662 349.918 219.647 349.014 218.665 349.17 cv
cp
1 .843137 .713726 rgb
f
205.349 318.299 mo
205.357 317.642 205.253 316.82 203.174 316.82 cv
203.077 316.84 202.997 316.844 202.896 316.867 cv
202.812 316.887 202.725 316.918 202.641 316.939 cv
201.534 317.236 200.39 317.715 199.237 318.314 cv
199.345 318.4 201.104 319.799 202.226 319.799 cv
203.382 319.799 205.337 319.165 205.349 318.299 cv
cp
f
176.999 309.938 mo
176.815 309.965 176.637 310 176.455 310.03 cv
177.176 310.517 178.908 311.406 181.25 310.75 cv
181.68 310.63 182.02 310.524 182.299 310.432 cv
181.27 309.689 179.215 309.604 176.999 309.938 cv
cp
f
176.999 309.938 mo
176.815 309.965 176.637 310 176.455 310.03 cv
177.176 310.517 178.908 311.406 181.25 310.75 cv
181.68 310.63 182.02 310.524 182.299 310.432 cv
181.27 309.689 179.215 309.604 176.999 309.938 cv
cp
f
255.682 412.998 mo
258.354 410.006 263.574 410.854 267.297 409.584 cv
270.791 408.391 274.352 407.32 277.664 405.713 cv
281.357 403.924 284.643 401.5 288.365 399.75 cv
291.449 398.299 292.721 396.225 295.896 394.971 cv
300.689 393.082 303.076 392.107 308.283 391.375 cv
309.713 391.174 314.063 390.328 315.342 389.625 cv
317.563 388.404 313.797 384.891 312.693 384.217 cv
309.434 382.23 305.449 382.494 301.73 382.283 cv
297.807 382.061 298.088 384.621 294.156 384.959 cv
290.182 385.299 285.355 383.717 281.701 381.703 cv
278.637 380.014 273.451 378.639 274.15 374.533 cv
274.566 372.088 274.984 369.643 275.4 367.197 cv
276.459 360.996 277.518 354.795 278.572 348.596 cv
279.232 344.725 283.895 342.523 287.627 341.883 cv
290.129 341.453 292.154 342.109 294.563 342.344 cv
297.164 342.598 299.443 341.98 301.791 341.031 cv
303.65 340.277 304.928 338.885 302.498 337.695 cv
300.918 336.924 299.34 336.15 297.76 335.379 cv
294.605 333.836 291.559 332.781 287.918 333.357 cv
284.338 333.924 280.76 334.488 277.182 335.055 cv
273.586 335.621 269.906 335.84 267.404 338.771 cv
263.066 343.852 261.098 350.707 255.084 354.443 cv
251.85 356.449 248.195 358.295 247.586 362.342 cv
247.182 365.033 246.775 367.727 246.369 370.42 cv
245.467 376.404 245.574 384.609 241.727 389.738 cv
237.914 394.828 225.298 405.545 225.298 405.545 cv
242.965 424.211 li
242.965 424.211 254.732 413.973 255.682 412.998 cv
cp
.968627 .745098 .537255 rgb
f
309.254 388.021 mo
306.918 388.465 307.756 389.754 307.756 389.754 cv
307.484 391.65 li
308.275 391.498 309.793 391.063 310.738 390.93 cv
312.006 390.752 313.098 390.512 314.785 389.871 cv
314.414 388.18 li
314.414 388.18 311.592 387.578 309.254 388.021 cv
cp
1 .843137 .713726 rgb
f
299.256 337.883 mo
300.387 339.063 302.867 339.143 302.867 339.143 cv
303.486 338.373 li
303.27 338.145 302.947 337.916 302.498 337.695 cv
301.363 337.143 300.23 336.588 299.098 336.033 cv
298.926 336.719 298.92 337.535 299.256 337.883 cv
cp
f
258.656 355.314 mo
258.656 355.314 262.918 347.48 265.006 342.041 cv
265.006 342.043 li
262.105 346.506 259.877 351.465 255.084 354.443 cv
254.168 355.008 253.225 355.563 252.322 356.156 cv
255.619 354.854 258.656 355.314 258.656 355.314 cv
cp
.956863 .690196 .470588 rgb
f
400.336 412.998 mo
397.664 410.006 392.445 410.854 388.721 409.584 cv
385.227 408.391 381.666 407.32 378.354 405.713 cv
374.662 403.924 371.375 401.5 367.652 399.75 cv
364.57 398.299 363.299 396.225 360.121 394.971 cv
355.33 393.082 352.943 392.107 347.736 391.375 cv
346.305 391.174 341.955 390.328 340.678 389.625 cv
338.455 388.404 342.221 384.891 343.324 384.217 cv
346.584 382.23 350.57 382.494 354.289 382.283 cv
358.211 382.061 357.932 384.621 361.861 384.959 cv
365.838 385.299 370.664 383.717 374.318 381.703 cv
377.381 380.014 382.568 378.639 381.869 374.533 cv
381.451 372.088 381.033 369.643 380.617 367.197 cv
379.561 360.996 378.502 354.795 377.445 348.596 cv
376.785 344.725 372.125 342.523 368.393 341.883 cv
365.891 341.453 363.865 342.109 361.455 342.344 cv
358.855 342.598 356.574 341.98 354.227 341.031 cv
352.367 340.277 351.09 338.885 353.521 337.695 cv
355.1 336.924 356.678 336.15 358.258 335.379 cv
361.414 333.836 364.459 332.781 368.102 333.357 cv
371.68 333.924 375.26 334.488 378.836 335.055 cv
382.432 335.621 386.113 335.84 388.615 338.771 cv
392.951 343.852 394.92 350.707 400.936 354.443 cv
404.168 356.449 407.822 358.295 408.434 362.342 cv
408.838 365.033 409.244 367.727 409.65 370.42 cv
410.551 376.404 410.443 384.609 414.291 389.738 cv
418.104 394.828 430.721 405.545 430.721 405.545 cv
413.055 424.211 li
413.055 424.211 401.287 413.973 400.336 412.998 cv
cp
.968627 .745098 .537255 rgb
f
346.764 388.021 mo
349.1 388.465 348.262 389.754 348.262 389.754 cv
348.535 391.65 li
347.744 391.498 346.227 391.063 345.279 390.93 cv
344.014 390.752 342.92 390.512 341.232 389.871 cv
341.604 388.18 li
341.604 388.18 344.428 387.578 346.764 388.021 cv
cp
1 .843137 .713726 rgb
f
356.762 337.883 mo
355.633 339.063 353.15 339.143 353.15 339.143 cv
352.533 338.373 li
352.748 338.145 353.07 337.916 353.521 337.695 cv
354.654 337.143 355.787 336.588 356.922 336.033 cv
357.092 336.719 357.098 337.535 356.762 337.883 cv
cp
f
397.361 355.314 mo
397.361 355.314 393.102 347.48 391.014 342.041 cv
391.014 342.043 li
393.914 346.506 396.141 351.465 400.936 354.443 cv
401.85 355.008 402.795 355.563 403.695 356.156 cv
400.398 354.854 397.361 355.314 397.361 355.314 cv
cp
.956863 .690196 .470588 rgb
f
358.832 342.051 mo
362.047 342.051 364.678 344.32 364.678 347.098 cv
364.678 377.111 li
364.678 379.885 362.047 382.156 358.832 382.156 cv
297.186 382.156 li
293.971 382.156 291.342 379.885 291.342 377.111 cv
291.342 347.098 li
291.342 344.32 293.971 342.051 297.186 342.051 cv
358.832 342.051 li
cp
.0862745 .0862745 .0862745 rgb
f
364.678 377.111 mo
364.678 347.098 li
364.678 344.32 362.047 342.051 358.832 342.051 cv
319.395 342.051 li
364.475 378.404 li
364.602 377.99 364.678 377.559 364.678 377.111 cv
cp
level3{
gsave
clp
[23.1531 22.9818 -22.9818 23.1531 341.475 343.076 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[23.1531 22.9818 -22.9818 23.1531 341.475 343.076 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
357.109 345.367 mo
357.109 378.842 li
298.91 378.842 li
298.91 345.367 li
357.109 345.367 li
cp
1 1 1 rgb
f
294.186 356.123 mo
294.693 356.123 295.105 356.477 295.105 356.916 cv
295.105 366.258 li
295.105 366.699 294.693 367.055 294.186 367.055 cv
294.186 367.055 li
293.678 367.055 293.266 366.699 293.266 366.258 cv
293.266 356.916 li
293.266 356.477 293.678 356.123 294.186 356.123 cv
294.186 356.123 li
cp
.0862745 .0862745 .0862745 rgb
f
294.186 356.373 mo
293.816 356.373 293.516 356.616 293.516 356.916 cv
293.516 366.258 li
293.516 366.56 293.816 366.805 294.186 366.805 cv
294.555 366.805 294.855 366.56 294.855 366.258 cv
294.855 356.916 li
294.855 356.616 294.555 356.373 294.186 356.373 cv
cp
294.186 367.305 mo
293.54 367.305 293.016 366.835 293.016 366.258 cv
293.016 356.916 li
293.016 356.341 293.54 355.873 294.186 355.873 cv
294.831 355.873 295.355 356.341 295.355 356.916 cv
295.355 366.258 li
295.355 366.835 294.831 367.305 294.186 367.305 cv
cp
0 0 0 rgb
f
209.651 221.034 mo
209.678 221.229 209.71 221.459 209.735 221.653 cv
209.737 221.663 209.739 221.678 209.741 221.69 cv
209.702 221.407 209.673 221.196 209.651 221.034 cv
cp
.968627 .745098 .537255 rgb
f
209.651 221.034 mo
209.595 220.626 209.562 220.39 209.651 221.034 cv
209.651 221.034 li
cp
f
209.785 222.014 mo
209.78 221.971 209.767 221.875 209.743 221.702 cv
209.742 221.698 209.741 221.694 209.741 221.69 cv
209.762 221.842 209.778 221.961 209.785 222.014 cv
cp
f
209.743 221.702 mo
209.742 221.696 209.741 221.694 209.741 221.69 cv
209.741 221.69 li
209.741 221.694 209.742 221.698 209.743 221.702 cv
cp
f
209.741 221.69 mo
209.739 221.678 209.737 221.663 209.735 221.653 cv
209.737 221.665 209.739 221.678 209.741 221.69 cv
209.741 221.69 li
cp
f
196.933 185.888 mo
197.576 185.243 199.83 181.319 199.83 181.319 cv
199.83 181.319 198.604 179.571 197.646 178.854 cv
196.262 179.819 194.959 182.913 194.062 185.38 cv
195.162 185.888 li
195.162 185.888 196.289 186.53 196.933 185.888 cv
cp
1 .843137 .713726 rgb
f
207.134 250.625 mo
204.358 250.625 202.088 247.994 202.088 244.779 cv
202.088 212.862 li
199.397 214.263 196.946 215.761 196.946 215.761 cv
196.946 199.874 li
196.946 199.874 200.653 194.411 202.088 189.853 cv
202.088 184.036 li
201.662 182.015 200.787 180.021 199.249 178.839 cv
198.716 178.429 198.175 178.485 197.646 178.854 cv
198.604 179.571 199.83 181.319 199.83 181.319 cv
199.83 181.319 197.576 185.243 196.933 185.888 cv
196.289 186.53 195.162 185.888 195.162 185.888 cv
194.062 185.38 li
193.475 186.995 193.622 186.69 193.475 186.995 cv
191.347 191.409 187.017 190.835 186.706 195.646 cv
186.313 201.69 179.882 211.851 181.425 217.079 cv
182.858 221.934 181.796 227.209 181.742 232.211 cv
181.728 233.566 180.685 235.531 180.713 236.506 cv
178.305 239.219 164.958 247.564 164.958 247.564 cv
180.522 272.227 li
180.522 272.227 196.229 260.254 203.742 258.785 cv
215.163 256.549 217.984 253.125 220.851 250.625 cv
207.134 250.625 li
cp
.968627 .745098 .537255 rgb
f
243.102 231.174 mo
242.76 231.174 242.467 231.24 242.193 231.334 cv
242.193 239.604 li
242.467 239.697 242.76 239.764 243.102 239.764 cv
245.219 239.764 247.9 237.84 247.9 235.469 cv
247.9 233.096 245.219 231.174 243.102 231.174 cv
cp
f
243.422 220.528 mo
242.941 220.528 242.541 220.655 242.193 220.862 cv
242.193 224.321 li
242.193 230.025 li
242.541 230.234 242.941 230.361 243.422 230.361 cv
245.539 230.361 248.221 228.158 248.221 225.444 cv
248.221 222.729 245.539 220.528 243.422 220.528 cv
cp
f
246.527 192.046 mo
245.156 191.772 243.518 192.013 242.193 192.599 cv
242.193 202.312 li
245.93 202.417 248.381 198.667 249.346 195.403 cv
250.129 192.753 246.527 192.046 246.527 192.046 cv
cp
f
247.578 210.216 mo
245.76 208.292 242.904 209.694 242.193 210.093 cv
242.193 220.331 li
242.656 220.126 243.164 219.899 243.748 219.642 cv
249.092 217.269 251.441 214.304 247.578 210.216 cv
cp
f
242.193 244.779 mo
242.193 247.994 239.924 250.625 237.148 250.625 cv
207.134 250.625 li
204.358 250.625 202.088 247.994 202.088 244.779 cv
202.088 183.134 li
202.088 179.919 204.358 177.29 207.134 177.29 cv
237.148 177.29 li
239.924 177.29 242.193 179.919 242.193 183.134 cv
242.193 244.779 li
cp
.0862745 .0862745 .0862745 rgb
f
237.148 177.29 mo
219.364 177.29 li
221.721 184.858 li
238.879 184.858 li
238.879 213.673 li
242.193 224.321 li
242.193 183.134 li
242.193 179.919 239.924 177.29 237.148 177.29 cv
cp
level3{
gsave
clp
[16.7121 35.0013 -35.0013 16.7121 228.332 175.654 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[16.7121 35.0013 -35.0013 16.7121 228.332 175.654 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
238.879 243.055 mo
205.402 243.055 li
205.402 184.858 li
238.879 184.858 li
238.879 243.055 li
cp
1 1 1 rgb
f
228.123 180.136 mo
228.123 180.646 227.768 181.056 227.328 181.056 cv
217.985 181.056 li
217.546 181.056 217.19 180.646 217.19 180.136 cv
217.19 180.136 li
217.19 179.628 217.546 179.216 217.985 179.216 cv
227.328 179.216 li
227.768 179.216 228.123 179.628 228.123 180.136 cv
228.123 180.136 li
cp
.0862745 .0862745 .0862745 rgb
f
217.985 179.466 mo
217.685 179.466 217.44 179.766 217.44 180.136 cv
217.44 180.505 217.685 180.806 217.985 180.806 cv
227.328 180.806 li
227.629 180.806 227.873 180.505 227.873 180.136 cv
227.873 179.766 227.629 179.466 227.328 179.466 cv
217.985 179.466 li
cp
227.328 181.306 mo
217.985 181.306 li
217.409 181.306 216.94 180.781 216.94 180.136 cv
216.94 179.491 217.409 178.966 217.985 178.966 cv
227.328 178.966 li
227.904 178.966 228.373 179.491 228.373 180.136 cv
228.373 180.781 227.904 181.306 227.328 181.306 cv
cp
0 0 0 rgb
f
19.2793 390.563 mo
35.0293 381.563 li
35.0293 381.563 40.0293 377.063 42.7793 363.313 cv
45.5293 349.563 42.7793 351.813 45.5293 347.563 cv
48.2793 343.313 51.2793 337.063 51.2793 335.563 cv
51.2793 334.063 52.5293 330.563 56.5293 329.563 cv
60.5293 328.563 70.5293 320.063 70.5293 320.063 cv
70.5293 320.063 75.7793 324.813 69.2793 331.063 cv
62.7793 337.313 61.5293 337.563 61.5293 337.563 cv
59.5293 350.563 li
63.2793 354.313 li
65.7793 354.313 li
66.2793 404.563 li
66.2793 404.563 62.0293 409.313 53.5293 408.813 cv
45.0293 408.313 32.7109 418.26 32.7109 418.26 cv
19.2793 390.563 li
cp
.968627 .745098 .537255 rgb
f
66.6836 402.67 mo
61.9102 387.424 li
61.9102 387.424 63.6064 379.045 63.1064 367.545 cv
62.6064 356.045 59.5293 350.563 59.5293 350.563 cv
63.2793 354.313 li
65.0586 354.463 li
66.6836 402.67 li
cp
.956863 .690196 .470588 rgb
f
70.7793 322.563 mo
70.7793 322.563 70.7051 321.273 69.9619 320.539 cv
68.8418 321.469 66.2061 323.619 63.4434 325.602 cv
64.7793 326.438 li
70.7793 322.563 li
cp
1 .843137 .713726 rgb
f
104.053 400.51 mo
104.053 403.725 101.783 406.355 99.0078 406.355 cv
68.9941 406.355 li
66.2188 406.355 63.9473 403.725 63.9473 400.51 cv
63.9473 338.863 li
63.9473 335.648 66.2188 333.018 68.9941 333.018 cv
99.0078 333.018 li
101.783 333.018 104.053 335.648 104.053 338.863 cv
104.053 400.51 li
cp
.0862745 .0862745 .0862745 rgb
f
99.0078 333.018 mo
81.2246 333.018 li
83.5801 340.588 li
100.738 340.588 li
100.738 369.4 li
104.053 380.051 li
104.053 338.863 li
104.053 335.648 101.783 333.018 99.0078 333.018 cv
cp
level3{
gsave
clp
[16.7125 35.0019 -35.0019 16.7125 90.1914 331.384 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[16.7125 35.0019 -35.0019 16.7125 90.1914 331.384 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
100.738 398.785 mo
67.2617 398.785 li
67.2617 340.588 li
100.738 340.588 li
100.738 398.785 li
cp
1 1 1 rgb
f
89.9824 335.865 mo
89.9824 336.373 89.627 336.785 89.1875 336.785 cv
79.8457 336.785 li
79.4063 336.785 79.0508 336.373 79.0508 335.865 cv
79.0508 335.865 li
79.0508 335.355 79.4063 334.943 79.8457 334.943 cv
89.1875 334.943 li
89.627 334.943 89.9824 335.355 89.9824 335.865 cv
89.9824 335.865 li
cp
.0862745 .0862745 .0862745 rgb
f
79.8457 335.193 mo
79.5454 335.193 79.3008 335.495 79.3008 335.865 cv
79.3008 336.234 79.5454 336.535 79.8457 336.535 cv
89.1875 336.535 li
89.4878 336.535 89.7324 336.234 89.7324 335.865 cv
89.7324 335.495 89.4878 335.193 89.1875 335.193 cv
79.8457 335.193 li
cp
89.1875 337.035 mo
79.8457 337.035 li
79.2695 337.035 78.8008 336.511 78.8008 335.865 cv
78.8008 335.219 79.2695 334.693 79.8457 334.693 cv
89.1875 334.693 li
89.7637 334.693 90.2324 335.219 90.2324 335.865 cv
90.2324 336.511 89.7637 337.035 89.1875 337.035 cv
cp
0 0 0 rgb
f
104.053 380.238 mo
104.053 381.375 li
104.053 381.375 102.297 386.779 104.904 387.313 cv
109.789 388.313 110.059 382.271 109.577 381.313 cv
109.568 381.297 109.555 381.277 109.545 381.26 cv
107.77 379.826 105.401 380.025 104.053 380.238 cv
cp
.968627 .745098 .537255 rgb
f
106.435 378.361 mo
104.053 376.457 li
104.053 380.238 li
105.401 380.025 107.77 379.826 109.545 381.26 cv
108.996 380.279 106.435 378.361 106.435 378.361 cv
cp
.956863 .690196 .470588 rgb
f
104.053 341.563 mo
104.053 341.563 113.529 345.063 115.029 347.563 cv
116.529 350.063 115.029 351.313 112.779 352.563 cv
110.529 353.813 104.803 354.254 104.053 352.254 cv
103.846 351.705 104.053 349.252 104.053 349.252 cv
104.053 341.563 li
cp
.968627 .745098 .537255 rgb
f
111.326 370.666 mo
110.559 368.953 109.577 367.637 109.577 367.637 cv
104.053 365.938 li
104.053 368.566 li
105.917 368.338 108.936 368.342 111.326 370.666 cv
cp
.956863 .690196 .470588 rgb
f
104.053 368.566 mo
104.053 369.146 li
104.053 369.146 100.03 379.729 108.197 378.229 cv
113.257 377.299 112.576 373.457 111.326 370.666 cv
108.936 368.342 105.917 368.338 104.053 368.566 cv
cp
.968627 .745098 .537255 rgb
f
104.053 357.979 mo
104.053 360.063 li
102.875 363.984 101.779 365.813 106.029 367.563 cv
110.279 369.313 111.029 365.563 111.029 365.563 cv
111.029 365.563 111.867 360.869 111.443 358.299 cv
108.771 356.619 105.619 356.199 104.053 356.098 cv
104.053 357.979 li
cp
f
104.053 353.297 mo
104.053 356.098 li
105.619 356.199 108.771 356.619 111.443 358.299 cv
111.359 357.787 111.23 357.352 111.029 357.063 cv
109.914 355.453 104.053 353.297 104.053 353.297 cv
cp
.956863 .690196 .470588 rgb
f
57.8779 225.014 mo
57.9541 225.532 58.8398 232.34 52.5518 229.654 cv
48.4717 227.912 43.6182 221.7 43.6182 221.7 cv
43.6182 221.7 46.2705 216.132 46.2705 210.98 cv
46.2705 210.98 46.9072 204.962 42.3682 201.236 cv
40.9189 200.045 38.3994 199.289 38.3252 201.087 cv
38.1885 204.386 37.3994 208.706 37.2432 209.914 cv
35.5713 222.776 32.2393 223.944 34.4385 228.875 cv
35.79 231.906 40.6689 238.141 42.54 240.813 cv
46.6982 246.748 59.5127 247.201 62.4697 249.484 cv
64.7275 251.227 69.8623 254.959 69.8623 260.568 cv
69.8623 269.383 70.2568 277.736 70.2568 277.736 cv
104.114 277.236 li
104.114 277.236 104.052 257.316 104.757 253.568 cv
106.13 246.27 110.751 244.234 112.474 225.014 cv
57.8779 225.014 li
cp
.968627 .745098 .537255 rgb
f
40.8682 203.861 mo
40.8682 203.861 39.9834 201.803 38.3037 201.508 cv
38.1221 204.744 37.3936 208.756 37.2432 209.914 cv
37.2002 210.238 37.1572 210.55 37.1123 210.861 cv
39.3682 210.861 li
40.8682 203.861 li
cp
1 .843137 .713726 rgb
f
55.5967 185.406 mo
58.6025 185.406 67.5986 188.65 65.9658 182.544 cv
65.0498 179.125 61.5791 176.207 58.2412 177.396 cv
55.1807 178.486 55.5967 182.673 55.5967 185.406 cv
cp
.968627 .745098 .537255 rgb
f
105.396 186.395 mo
99.7998 188.469 92.0244 184.1 97.5986 178.32 cv
100.853 174.945 106.106 180.261 105.396 185.266 cv
105.396 186.395 li
cp
f
93.3877 185.751 mo
87.0283 188.3 78.1943 182.933 84.5283 175.833 cv
88.2256 171.686 94.1943 178.217 93.3877 184.366 cv
93.3877 185.751 li
cp
f
78.458 185.743 mo
72.2451 188.842 63.6143 182.317 69.8018 173.684 cv
73.415 168.643 79.9795 174.128 78.458 184.058 cv
78.458 185.743 li
cp
f
112.474 184.911 mo
115.688 184.911 118.319 187.18 118.319 189.957 cv
118.319 219.969 li
118.319 222.743 115.688 225.014 112.474 225.014 cv
50.8271 225.014 li
47.6123 225.014 44.9834 222.743 44.9834 219.969 cv
44.9834 189.957 li
44.9834 187.18 47.6123 184.911 50.8271 184.911 cv
112.474 184.911 li
cp
.0862745 .0862745 .0862745 rgb
f
118.319 219.969 mo
118.319 189.957 li
118.319 187.18 115.688 184.911 112.474 184.911 cv
73.0361 184.911 li
118.116 221.262 li
118.243 220.85 118.319 220.417 118.319 219.969 cv
cp
level3{
gsave
clp
[23.1524 22.981 -22.981 23.1524 95.1152 185.936 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[23.1524 22.981 -22.981 23.1524 95.1152 185.936 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
110.751 188.226 mo
110.751 221.7 li
52.5518 221.7 li
52.5518 188.226 li
110.751 188.226 li
cp
1 1 1 rgb
f
47.8271 198.982 mo
48.335 198.982 48.7471 199.336 48.7471 199.776 cv
48.7471 209.118 li
48.7471 209.558 48.335 209.914 47.8271 209.914 cv
47.8271 209.914 li
47.3193 209.914 46.9072 209.558 46.9072 209.118 cv
46.9072 199.776 li
46.9072 199.336 47.3193 198.982 47.8271 198.982 cv
47.8271 198.982 li
cp
.0862745 .0862745 .0862745 rgb
f
47.8271 199.232 mo
47.4575 199.232 47.1572 199.476 47.1572 199.776 cv
47.1572 209.118 li
47.1572 209.418 47.4575 209.664 47.8271 209.664 cv
48.1968 209.664 48.4971 209.418 48.4971 209.118 cv
48.4971 199.776 li
48.4971 199.476 48.1968 199.232 47.8271 199.232 cv
cp
47.8271 210.164 mo
47.1821 210.164 46.6572 209.694 46.6572 209.118 cv
46.6572 199.776 li
46.6572 199.2 47.1821 198.732 47.8271 198.732 cv
48.4722 198.732 48.9971 199.2 48.9971 199.776 cv
48.9971 209.118 li
48.9971 209.694 48.4722 210.164 47.8271 210.164 cv
cp
0 0 0 rgb
f
64.4229 225.014 mo
64.4229 225.014 87.9033 229.646 91.751 235.203 cv
91.751 235.203 98.6074 227.053 105.15 225.311 cv
94.4561 225.438 64.4229 225.014 64.4229 225.014 cv
cp
.956863 .690196 .470588 rgb
f
106.759 225.014 mo
106.228 225.063 105.69 225.167 105.15 225.311 cv
108.392 225.272 109.858 225.182 108.173 225.014 cv
106.759 225.014 li
cp
f
334.902 202.527 mo
334.928 202.723 334.961 202.953 334.986 203.146 cv
334.988 203.156 334.99 203.171 334.992 203.183 cv
334.953 202.899 334.924 202.688 334.902 202.527 cv
cp
.968627 .745098 .537255 rgb
f
334.902 202.527 mo
334.846 202.118 334.813 201.882 334.902 202.527 cv
334.902 202.527 li
cp
f
335.035 203.507 mo
335.031 203.464 335.018 203.369 334.994 203.194 cv
334.992 203.19 334.992 203.188 334.992 203.184 cv
335.012 203.335 335.029 203.454 335.035 203.507 cv
cp
f
334.994 203.194 mo
334.992 203.189 334.992 203.187 334.992 203.183 cv
334.992 203.184 li
334.992 203.188 334.992 203.19 334.994 203.194 cv
cp
f
334.992 203.183 mo
334.99 203.171 334.988 203.156 334.986 203.146 cv
334.988 203.158 334.99 203.171 334.992 203.184 cv
334.992 203.183 li
cp
f
322.184 167.38 mo
322.826 166.735 325.08 162.813 325.08 162.813 cv
325.08 162.813 323.855 161.063 322.896 160.347 cv
321.512 161.312 320.209 164.406 319.313 166.873 cv
320.412 167.38 li
320.412 167.38 321.539 168.023 322.184 167.38 cv
cp
1 .843137 .713726 rgb
f
332.385 232.119 mo
329.609 232.119 327.338 229.488 327.338 226.273 cv
327.338 194.355 li
324.648 195.756 322.197 197.254 322.197 197.254 cv
322.197 181.367 li
322.197 181.367 325.904 175.903 327.338 171.346 cv
327.338 165.529 li
326.912 163.507 326.037 161.513 324.5 160.331 cv
323.967 159.921 323.426 159.978 322.896 160.347 cv
323.855 161.063 325.08 162.813 325.08 162.813 cv
325.08 162.813 322.826 166.735 322.184 167.38 cv
321.539 168.023 320.412 167.38 320.412 167.38 cv
319.313 166.873 li
318.725 168.487 318.873 168.184 318.725 168.487 cv
316.598 172.901 312.268 172.328 311.957 177.139 cv
311.564 183.183 305.133 193.344 306.676 198.571 cv
308.109 203.427 307.047 208.702 306.992 213.704 cv
306.979 215.06 305.936 217.024 305.963 218 cv
303.555 220.711 290.209 229.057 290.209 229.057 cv
305.773 253.721 li
305.773 253.721 321.479 241.748 328.992 240.277 cv
340.414 238.043 343.234 234.617 346.102 232.119 cv
332.385 232.119 li
cp
.968627 .745098 .537255 rgb
f
368.352 212.667 mo
368.01 212.667 367.717 212.733 367.443 212.827 cv
367.443 221.098 li
367.717 221.192 368.01 221.258 368.352 221.258 cv
370.469 221.258 373.15 219.334 373.15 216.963 cv
373.15 214.59 370.469 212.667 368.352 212.667 cv
cp
f
368.672 202.021 mo
368.191 202.021 367.791 202.147 367.443 202.355 cv
367.443 205.814 li
367.443 211.521 li
367.791 211.728 368.191 211.854 368.672 211.854 cv
370.789 211.854 373.471 209.652 373.471 206.938 cv
373.471 204.222 370.789 202.021 368.672 202.021 cv
cp
f
371.777 173.538 mo
370.406 173.266 368.768 173.506 367.443 174.091 cv
367.443 183.805 li
371.18 183.911 373.631 180.16 374.596 176.896 cv
375.379 174.246 371.777 173.538 371.777 173.538 cv
cp
f
372.828 191.709 mo
371.01 189.784 368.154 191.188 367.443 191.585 cv
367.443 201.825 li
367.906 201.619 368.414 201.393 368.998 201.134 cv
374.342 198.762 376.691 195.796 372.828 191.709 cv
cp
f
367.443 226.273 mo
367.443 229.488 365.174 232.119 362.398 232.119 cv
332.385 232.119 li
329.609 232.119 327.338 229.488 327.338 226.273 cv
327.338 164.627 li
327.338 161.412 329.609 158.782 332.385 158.782 cv
362.398 158.782 li
365.174 158.782 367.443 161.412 367.443 164.627 cv
367.443 226.273 li
cp
.0862745 .0862745 .0862745 rgb
f
362.398 158.782 mo
344.615 158.782 li
346.971 166.352 li
364.129 166.352 li
364.129 195.165 li
367.443 205.814 li
367.443 164.627 li
367.443 161.412 365.174 158.782 362.398 158.782 cv
cp
level3{
gsave
clp
[16.7121 35.0013 -35.0013 16.7121 353.583 157.147 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[16.7121 35.0013 -35.0013 16.7121 353.583 157.147 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
364.129 224.549 mo
330.652 224.549 li
330.652 166.352 li
364.129 166.352 li
364.129 224.549 li
cp
1 1 1 rgb
f
353.373 161.629 mo
353.373 162.138 353.018 162.549 352.578 162.549 cv
343.236 162.549 li
342.797 162.549 342.441 162.138 342.441 161.629 cv
342.441 161.629 li
342.441 161.12 342.797 160.708 343.236 160.708 cv
352.578 160.708 li
353.018 160.708 353.373 161.12 353.373 161.629 cv
353.373 161.629 li
cp
.0862745 .0862745 .0862745 rgb
f
343.236 160.958 mo
342.936 160.958 342.691 161.259 342.691 161.629 cv
342.691 161.999 342.936 162.299 343.236 162.299 cv
352.578 162.299 li
352.879 162.299 353.123 161.999 353.123 161.629 cv
353.123 161.259 352.879 160.958 352.578 160.958 cv
343.236 160.958 li
cp
352.578 162.799 mo
343.236 162.799 li
342.66 162.799 342.191 162.274 342.191 161.629 cv
342.191 160.983 342.66 160.458 343.236 160.458 cv
352.578 160.458 li
353.154 160.458 353.623 160.983 353.623 161.629 cv
353.623 162.274 353.154 162.799 352.578 162.799 cv
cp
0 0 0 rgb
f
365.836 257.574 mo
363.674 252.74 361.51 247.902 359.348 243.068 cv
357.328 238.551 355.436 234.025 353.635 229.459 cv
353.613 229.422 li
353.613 229.422 356.713 248.701 357.133 250.865 cv
358.176 256.219 363.746 260.318 367.33 263.926 cv
368.016 264.617 378.119 274.121 378.119 274.121 cv
378.117 274.119 li
377.447 273.41 376.744 272.596 375.945 271.607 cv
372.379 267.193 368.189 262.836 365.836 257.574 cv
cp
.956863 .666667 .431373 rgb
f
413.355 261.848 mo
408.742 256.781 412.76 245.521 409.869 239.438 cv
407.768 235.016 404.152 223.002 398.762 221.809 cv
396.25 221.252 394.645 222.727 392.383 220.447 cv
389.848 217.888 388.148 220.676 385.596 219.953 cv
383.15 219.26 382.195 215.518 379.141 217.898 cv
377.301 218.765 376.113 220.379 373.857 218.994 cv
371.902 217.793 370.385 215.876 367.934 217.647 cv
366.406 218.271 365.582 219.834 363.65 218.974 cv
361.904 218.198 360.934 215.136 360.131 213.564 cv
356.867 207.188 353.605 200.812 350.342 194.436 cv
349.414 192.625 348.359 189.488 346.609 188.555 cv
340.729 185.411 341.471 195.622 342.441 198.385 cv
344.592 204.504 346.742 210.622 348.893 216.74 cv
350.402 221.035 351.98 225.264 353.635 229.459 cv
355.436 234.025 357.328 238.551 359.348 243.068 cv
361.51 247.902 363.674 252.74 365.836 257.574 cv
368.189 262.836 372.379 267.193 375.945 271.607 cv
376.744 272.596 377.447 273.41 378.117 274.119 cv
380.191 276.311 381.945 277.469 385.215 279.482 cv
389.125 281.891 396.07 290.734 396.07 290.734 cv
421.813 275.436 li
421.813 275.436 415.193 263.863 413.355 261.848 cv
cp
.968627 .745098 .537255 rgb
f
342.809 189.838 mo
342.809 189.838 343.813 193.558 345.145 193.76 cv
346.479 193.964 349.48 192.597 349.471 192.573 cv
348.67 191.088 348.008 189.131 346.609 188.501 cv
346.34 188.378 346.088 188.288 345.844 188.212 cv
344.697 188.436 343.334 188.894 342.809 189.838 cv
cp
1 .843137 .713726 rgb
f
107.467 41.7485 mo
113.612 48.1343 li
107.467 55.7485 li
107.467 41.7485 li
cp
.956863 .690196 .470588 rgb
f
107.659 92.3833 mo
107.659 95.5981 105.39 98.229 102.614 98.229 cv
72.6016 98.229 li
69.8262 98.229 67.5547 95.5981 67.5547 92.3833 cv
67.5547 30.7368 li
67.5547 27.522 69.8262 24.8911 72.6016 24.8911 cv
102.614 24.8911 li
105.39 24.8911 107.659 27.522 107.659 30.7368 cv
107.659 92.3833 li
cp
.0862745 .0862745 .0862745 rgb
f
87.6074 31.6392 mo
85.8164 31.6392 84.3574 33.0972 84.3574 34.8892 cv
84.3574 36.6812 85.8164 38.1392 87.6074 38.1392 cv
89.4004 38.1392 90.8574 36.6812 90.8574 34.8892 cv
90.8574 33.0972 89.4004 31.6392 87.6074 31.6392 cv
cp
87.6074 38.8892 mo
85.4023 38.8892 83.6074 37.0942 83.6074 34.8892 cv
83.6074 32.6831 85.4023 30.8892 87.6074 30.8892 cv
89.8125 30.8892 91.6074 32.6831 91.6074 34.8892 cv
91.6074 37.0942 89.8125 38.8892 87.6074 38.8892 cv
cp
1 1 1 rgb
f
87.6074 32.4204 mo
86.2461 32.4204 85.1387 33.5278 85.1387 34.8892 cv
85.1387 36.2505 86.2461 37.3579 87.6074 37.3579 cv
88.9688 37.3579 90.0762 36.2505 90.0762 34.8892 cv
90.0762 33.5278 88.9688 32.4204 87.6074 32.4204 cv
cp
87.6074 37.6079 mo
86.1094 37.6079 84.8887 36.3882 84.8887 34.8892 cv
84.8887 33.3901 86.1094 32.1704 87.6074 32.1704 cv
89.1074 32.1704 90.3262 33.3901 90.3262 34.8892 cv
90.3262 36.3882 89.1074 37.6079 87.6074 37.6079 cv
cp
f
70.6563 79.0708 mo
78.0605 77.9507 94.2754 64.9331 95.8105 63.1538 cv
98.0889 60.5103 108.026 47.4712 108.026 47.4712 cv
108.026 47.4712 110.663 44.4272 113.058 47.4712 cv
115.453 50.5132 116.595 53.2798 116.412 55.4292 cv
116.17 58.2954 112.339 63.1968 112.339 63.1968 cv
112.339 63.1968 116.412 66.8726 115.453 69.519 cv
113.495 74.9272 110.952 77.7104 110.952 77.7104 cv
110.952 77.7104 113.938 80.6724 114.017 82.1577 cv
114.241 86.3716 110.952 90.3501 110.952 90.3501 cv
110.952 90.3501 112.913 92.2476 112.819 95.0317 cv
112.656 99.8042 95.7998 117.271 91.6074 119.495 cv
86.9941 121.943 72.0068 128.185 67.5547 131.4 cv
62.6338 134.956 54.75 147.297 54.75 147.297 cv
33.4473 131.155 li
43.3887 117.928 li
43.3887 117.928 46.9824 112.545 46.5039 101.777 cv
46.0244 91.0093 46.2637 89.3706 48.1797 83.2847 cv
50.0957 77.1987 50.3359 68.3032 50.3359 68.3032 cv
50.3359 68.3032 50.5762 63.856 55.6064 56.3657 cv
60.6367 48.8745 63.752 40.6821 63.752 40.6821 cv
63.752 40.6821 64.9492 37.6392 67.8242 42.3208 cv
70.6992 47.0024 67.4707 58.2778 64.1885 63.6216 cv
62.4238 66.4956 62.752 67.6011 62.752 69.2397 cv
62.752 69.2397 62.249 76.0991 63.709 77.6665 cv
64.9043 78.9478 68.9043 79.3364 70.6563 79.0708 cv
cp
.968627 .745098 .537255 rgb
f
65.8887 43.6758 mo
65.8887 43.6758 66.0591 41.5991 63.5757 41.1304 cv
62.8975 42.4297 61.0132 46.3228 60.0894 48.6499 cv
61.9121 49.3486 li
65.8887 43.6758 li
cp
1 .843137 .713726 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.0.3
%%For: (\704\750\755\740) ()
%%Title: (1402.i032.007.P.m003.c20.hand phone.eps)
%%CreationDate: 3/8/2014 11:56 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj2OucKP3hcSPU;=\'Zcl$WS!n:Ctb"9N*]+cY<.K=?*I9[8Ff[pL`;h:5i$9JSLI+&3"bX/dM28gUH9eI)c<7^l^,e??0;
%^XlCVC=P#''`M&1r*s0oH0*[sO2T*u9&5qCmi8_R-,89]26)X:HTdYkiRLj3hA(FuV;D+"C?)Ks[d',qi0hf\H![FKrBd8Zo/\<N
%XUn;nVh\Wgi@/F?582g9hl?eA`:%eu#\]_(4l4H+>p<_PZhX(7f$lM1[*EJTKAQn22U?2DjkhEa;t0CV-#=p7B5tC.Ia`(XSP#Xe
%*Nc5=pfW8';gJDklW-)@:Fa55O.E*]2R/c5Ca,ZL:K]r98jA4.iP/>>"9^ri.fMY!li2X1[?R7<\=]Ok4SGI'Jq]s"?YeX%[BB[c
%//"'nh,D)>XEknZL/HFD[$b+Z?h,9>15l_eY1d(5;A:8(1<d+8_^AC3dY@%u.Fg<)Y,c6qR7J(jmhPl+p!e'?/,LnQigEj1V"-_e
%=eS"\I,(k#Xk35<#K16ebiJjcBU&HFYT#`3W-U;u'"@L?JT9t_Y5AdnCSTV&nQ8RI9(:Z[DQW.$n51uAdE,hGYFd`0&>?/)j.m)6
%V1KO`>uOX]Ba5kp)$#gi12%=?^rM(^D&f>rd+#s6jf23c?Zf1YROXPH[oFkI3c(Z5qF:si*U018r"F/Rf:@q/%gZ7EoA"mR(R4R.
%$$Ns[0BX62'Rq)%bkaR+9TX#L8phTV6/OsAh59+`!9Z!Sn3Eh1%KH7E9E*3s5H8ncbM?3ogYAi:2ZEVa0iMsppo,LAEt'qZYF"!:
%.08Hn;u?ndMj<`30^Vl/9B2HD0fJu.#G5Iq'Hr1tO$Jf@9%)83O4m$t>%uU*[Ui#)3D!.fT[uX@1qT8=]_Dh`5QbQ$;Pu+M"N#i,
%6_$PR_!u<m&*ke+<k!LJ3c-^ROVep$Hkf6mAdCUW24]EAK0"N9Vml2d=05N+>$gg3;B"'aJFCC9L-1s$>F=_.5AH&SK\r-k4-<^5
%B[d5`*<.MTUAp'al6fEFST4nrcOcj*''J=/Y>`#-'e:(PY>t*+fcaJg_)%31LS-a%ms_[lP_LQ=GkH+BXk.;7@]AYC]iGXSA13L$
%0YT]iP@1/T7?tTge7#%FSTHA&5LRqKXbiWRlK$Z7+rE$B&n]XrGn(48]E#%9rqV><b1>YX@^kHa/$QahV\WXklWt#/hN\);ChRGm
%'NR.EPqE%3a2^FEf_k?%Muc-ir)iGu_iFma0)a`.ZLj?5T03&<cqbf`a=?hWdZ6j^3rOS5PVqC>U`YMDD#//8`smNkfg#Mh+rX\i
%IT0C$+5JeZ'7MLaVB6%ln:*t?5*ghn4T+Q]:VeVn'_kPa7tVnSIXiO".c?/o@_QBupj^tI#%tt*3!DU))H%6r@gRJ@eE$M*&bH&4
%0q&56VF4KV><mh?RtbXF%\Vn,]NMI<9=IU<L<d,+hC@0XXkT^i"!K[Oa&*i40c_3$P]M"uDA25TJYjH\6%f0PG6:1<0Q%%2,ot"C
%#,8HWI!-m8jKtG>ZZ7r01m?,FEY8hMWLA]A0QrDfOb:Ko(p;g7[K56^@2QSL)60Co"arnelT#gS%#E$QD;EW7?.UqSHo%mtm:^bs
%Vh'4]%'J`+[Us6NAn\cQBr\&/"a*>[X#X"L%#EY8D:P*(+OOSm(='6<R\i^2ef7Tla#%X9/pdNd_:2`q,+CEJ\YEj-6#eI#2@"WV
%;W-E4MLl;3@s\-Tg<6pe2@BZH?k]E6CF1rJRZ<:)1<@8>/G``mDVoAI8#GRD[Y49`o9&hWbi;ft>#k@@P;g)b"a;Xc=pmQmf&<fV
%#K<#@rQs_TV1c[DfD75aX,YWghmI2>^0H@,YuS?uG'n8R<rau(C3dKPV<^a]h"'caTr$?6^g;e'idX!RE7'1h(I@m*9<#<4BXE4'
%8,DXR])q<%9"B"+":`rd_?'cAhTAeRF7!&3Xucs"#nSK':4kkC.75n_[nBUU$Fpg((rMpZQUupJ)!<Y1Inr!258(3i@ra,2p<M!+
%76,u8k=i@E1YmY4L2sGWkH%QV^`"E!,\(699Ot'U]'*2nHH@6^$[uil1r@6[`mAs2>(4(f9k#FO`(@5/NT[.pXW<]ghKM2@<KrUn
%`DaHid]#KN4.`i<iF,>;$#_QbM4)Po@ZG*f_JB%&QN+&p1G=UTm(lJ2Ckcr&NoFIE1@1Wn1E$njUW6de6\JU"ED/9ZI`q%6=p`1q
%6Cj@dSM[p[P/#2.]*)p'0`GQt>(,+AGbmUJ36(d@-9bcbU"-"S=+]]-S#@HRGWZ"BH2fY-0ot[uNgY0'2im=fO^5iFcBq+FQRr^f
%rT_QqV*0n,"u8"!fIh`<c==KNMX;$eN96hi4LCT5G4X'u*npR_L6tTU<0DtEa,(QB$$RF)rI/rq6Pg_IEHKA=rbS%m[g$3.2?QZ=
%Z;gVIAD`phD=O8FE995=jNc<ph\18(TE*MQH;^;AW["?XBM(lSiP.tlrb]G`pq;7Oal@ZBO%EqNJ2f8ZE>XhDUZc&2>-8%cUfd/e
%IsF6kYQN9Pa(lu[],5Tu>*riFb2"<a,%43'O)\s.`(enU9-Sg9?Tn1Jiiq7?<pC!M?cf@7nD$G6c6Cc[`Q1VQnk,`rXc)@KOpm\1
%4=R^BI^A;cW?^oTjU.T'8A\Ga3[q59m.dka+7A+.9OQ?D3r)0u6c,C-#ijGc[7!&6L!flgFf;8-@Qol`rCjVEmEInlT58Iaj1S6A
%%6I-.Z^gd)=6Oa;U/\"K52lFYY1IO".pbA#I'fd*#*a]Bb[G_J*5@E?@-/)i$-g;n>I@\u@qRT[3R(SI6-e]>QiXBjl!2j<:(gjE
%;s*"]B)@UUKuC.KD2c>BnlOk^\/@3NA0qk%;EQ5/"#idUib!f&OG!j%#nQlSldE"8L_pZBln"<DE?jJ/C[>nSp*@]N^i*NS.*P9N
%i%c&=4llD[npCuD=77:[3'oL[6OqXXqY-(cEoSdXVJINJkjs5_$&#JQIH1.;nYA._?"5NR^2^l*4Pr*s4^?8+N=uK4;nNodB9L4)
%IH/]rqg@;r=&8f5fJbEa/hah.:<)*-1GC%8XGI0ol:jNqHU-<@eg:)T-fA5VEGORt'+9GU:7@tp`NU`/eIT7WI6;:F4C&I'X!PFF
%3rsQ=%nuMtM7Jsge038C-S]pq:F'23VJS>\W=0ZFo#=\QpZid&/GL.qNE!&!)rE0*Wo)KCq;mT*bGu00EL<ZLk,G[oCjaI[8=_'4
%rq$'@4F]98T?Zt?Z^O*WSHO:WhZ#(5DPHI+6Hi$cR[&CD^C#H:bg]1n'2I$;/**!4P?f3;niI/O32%adcTA-"pmrP2orZn.BeUcG
%,;m:W%L2D<nSS:NPOkH21V!%#'7??T0c3&/eI:<RHl7Uls%Za3Sp6ZBi^KYG3:S2u0U.'T-XPqlQ[.S%Sp6YN?KR*2H/`D,Gki^V
%E!CL*k6[r0!pQ#(S;9.ISjAgV%+<AU<H5'JRek7\D`jLQ8]u4b0<D*Q3qS<j));:MHWS1fh8,Yp_K,K+W^q.r_R*ZLOlV+IBtpSj
%#nQWc.cuZLXVStQ9hon?F\M5F9`;hQ9>>uA(WZ>':=HI-c>R]kc,K3*m^M(_D4TSB1r$k@;JN5#Zh/k$7*Nk^n/<u?(&(P,W\a.%
%f47S1M3kkiB=_f6MnUaVr!REG1G/CM0_hY%]Eug/pc%%<Ar:BAls\c$J*7BHRCr0$G*9-eEpZ;IGM:?G]pPH-BO"lPr=5"Jo#h@6
%"Rh:DR$"-P4@]>[@o,q[H^#oAHmIYoM%a"jHfE'2E0O['\(OAUoQt4%<C2/3IYM31)iZV>A?T?>^!b.pMF!6!=/p@kX=NO'*l3nJ
%a*AM?_UGH6%,T*/1t.B_bZ1>_[1RW#S[k<Bh1<hYp9dt>r0@0PL3t>V7]*f%l-:-R)2W%hGP[;<C8U!Lnnd1IpXaP^@ncJErFYRl
%58p>)r:5ojN3]%jlHE$s9gO)MC/.FHYM5IlFH^$Vme1KZ\%#2s:>WE8X,cP]kjmP4VeGK3c$c>dSkh1-5sD\OdEL_?k9n=aVXEWh
%m[mk.k9n@>ME.'3@`A-LnpVqJ-ckHuaQJ?>k)88IEVsZ`2>-:pquHQbXc;oSjR]d!>1^d+QpL_^Ek^UhH]eJX]9D=)2DW$[+h]tt
%nQW!&P8\Gonk'q+qQ`si'!1\GA+_$^INg>6G$>d=WaAPBn+N=Bm:Y_omRd,tleU8<W93hBDn(mk-cK&uERLh.9#EP#A#EH@n$Gte
%`*3Xs;Ttu&"M:WL?J@-?r,5l.Hq@*#p#&Vj.2cn[VV@9c4D6@`72pHfL@<".m1E>EGL;*$AmLjS$_C87c_+&WA3?d^0o6bV&18OP
%<?&&m;0-Tcc,>R4m@,^-BRWIkFAJXK=["20q[tiO\_nrgj#ZjW9WZMmR@&_SO(hmi*pCbkd#=U-ijr?I%o[D]IV,^M=4mKKp)q13
%_E26=DJ/.0IL<(=,\L9B%eX?[d^r/e<N*9:.HU/jetK^c.GXGGP)/'lA1+caK)H'dpeB3'<Xa>letgZpQ]CO1)4;cs9A:mA2=#"c
%4'/a[X-l$G`[j4!iXcH:n0n$FbH&**PIuHT$?[E#i$A2Yq.MRNr4&:N4nZYGX\VF2;]l%ZYY`GGVHWp]QJaAb34H;Wo+K7(;e#Ql
%.%%!#-iGu1cpP!j;/Pha(dkt/"^_S"^u_-[\%U!nj_nk!Eq#o4r;OBTU$oY@2Z[tlP.d$.?KaJYp0lOsI`noP^*bW0Y^d8Um<dF[
%lBEgbAZJ[$_?lo1NY=Lj,2>_p"?.[JKie5rq_?=E`>@Knf1NO[1ZkK81)$lj:9s3.=Hd2=M8beL`=%!A8IUR>XTs>R>ZN@thb.p6
%C<<NB%N7n_=p]=lmRB?j^%P'pDQR.9P,+:NaHL)6jYs5HP-Y^+\QnAuL9=Z6^-^=@EE0!)rQ@erd1)in!T35(',_;e2kf:%HdX$C
%]i%M!A%sZ/F4Uq;c.n%@,.DmP,LuT!L;.ZHc;a(nP):0l8fI`_S63/k1YpLSFjc#$0;I)9_:&-Be+h6cc4cH4c[#RP5MJ#eF8tNq
%9+Y4OqOC2$K)(q+cai"U%]>Jln6E:6hFKHIE:+1I=mS@0`QFGXZ1hPslt>]diWOS]o#d58P22Q,EPf0QT[@L\2l_k<"T'lobP013
%T/F**F3Ab4/7/HASQii.]]E'$ARW6Gr)G0nH=`8TS!;&CA*2K@p=c2OEDl/)C.[&LEX0P?e':@EP*--;Og'<8IY"J<Bq[-U"Xa*U
%[XHHcM;Scr3)<H"2<2tKZBnePR3K??[8XE%-CVBb'4%\&6W7Yf??_n"Ju37sASQ\9e25BiHpu+m]tA>SVYL(Kep%%Of't[UY:"]0
%FM%,hg"WVHDc4gX$a8m1MZLkuW@/)FHJ7Ck<Ct-KPXj"1r[218IgOd&ho'r%UIJhof'9fp1PDNk/+ZFs6rWQqc"fJ?ciVEuaE_u'
%_6!$ahSQYEhoIeuOnS^4S5Z.To/C\bIh7!sNJ#osQ>"uAAH!q$hak`!*b^!se?/$sk+rt\[;0hrK!EuYeOXZ?G$_1''cts8^*.;^
%p2fCC)`(U%E>M^1T.q+f)&>p#aSa%GkM7#?H)u0*@^XlM]:mR#fo?#$*5/A@#mP83.rCG'1$*O9K/+A:]2.T-NG4Em&tDdhB/K$Y
%OE,!2dYq]nS/KC],iN1'd?sKiG+R*K<\lqcBZr7NG9s#XbYgnT&Ms$;``-M+B&L[gRCR6'',Q#T>oP8C2YAK9@9It*QYk&e,Q)&V
%1[^-Bq5kk5e6$F<NDGM,)2^?d"?H)*@L:ngjL&+4^[b^48c$g*pF8kg.@Xj+DsENao@%mSG]+Ylc/ZK_]JhDnbZMNE^bM>OG]*dn
%jud,c?\1W#H,MXI&RU,5Rg4?4J8ZLublb]ZaYFD%'#[?+/-UF-FkutF,N)dsKo4t[MK^FW5*PHaa#FTZ)ht:t`kU[aZ57/Qic9e2
%)DirZfh$Fu`Jg;1Wglh'mU=,mHo,\PCmNL11MOj@_0@74V!#a5DS0kh<sefO4(Gs9+kr5l5c0"-YQ!On81$@5n*mAZAoJ^V,0:I<
%BC&W]\N]Bb/&?E%Hm_b[2C1G9$0KT!h[,fVoC/g0C@gi:_*a@CgqqiE:Yk*!rYsg[.+Zmpa9d*)-[i0upd2$<E,qIVa!l6"ea%\W
%`39$6A6G],7jc2^-Ga<DmJ6'tAAYBA^=$n"]olaol^\-]GperKRKq(`f\*qWO\UKFqX1GW8Sn+MYFc+jAEjsP,o-?RqECpaO5lY)
%O%J?&!-,k6/r/o;4;_WTVVAgj,`&ksN_)bsS#5$fr8M2aam@1r8TXh/X3.;V[U$=hs*k@GVO*Q_2-GK4FfNLWZIPm"iIfK(`CGOU
%enHE"m2?XCJqkqGErO=u8n@i&hP=9DWdf:Y'!MIr9uh#q>a?4J@N(P_ST9ld%iK.\Ca?7;&jp*j08]\5XS(LIMTKV0mX#7X3\5R,
%dQo,"D-@S;UmS/@l3UK3Y>jf<\g+4t@`'K8:Pu9?:\f\IS<_9_:??gH^-^>+7M]=D;G/hX/&.!o)7Yd91p9<8Y1P)CJ4tB-ZhfUK
%OI]IIr+%?9F-S/M=fOk]1tSY]@&XH1QLdug_:t3=UAR+)OA2j.R+J)14$t_q[4!h>WtS3fl*!NIU0(@_,:@GmkHu`0>*O:ab($i8
%V)1iQ.#Dd6e?>K#=c9$"CJjMWI4NQ?/P;bj2"`2(?AgSc-(WT<k2""FRRB2_Mhs@6Z+SgEc:V'H2BRdfG<Nq$)2R0B`?Zn"WEThr
%.PooAX/kJ'1OK+9U.@CqCUgt5eI-GIj%C,bos!82?TU&&FT9S3-$YpRgsF:Th4tKc!]?Mf\pqQC/S+QSja<t4%LjJq9E^p$Ct+N=
%Pn#XX\glW@/E<)3q=BZ6c(BI)jmOt,c:R1heSi>b]r3mhWmb<7=Gn8P:p4*jHifnDKU^!PUf(u/r=DOl*TDR#*%_*%o+5pNs%1tB
%U8]RfD:u)Rkk%0g1^uXYMJ=$gZ$.(55Rm_hJUd()Vlp*t/#=_pK@Iq;8uhe:I!L[G"FZMcPTp]@6:o<DF\rhc;ra]qjAl.Ra(I;j
%/s=\sq!lSZe2&&0!SbuZ[fO7g1YYt+[u(,!r!X3+#2f@iV4.=U5Q<\m%?g/=RB6VU3]mcL9JsU\>HVgW2A'e@r'>O#gOp*Gm[C!\
%+&q(I9SB@5C0Cbf9Z%<Cf5,=F(-*Qef#(tb.1?O\HOp-_4B3+bHuYC1`#T3XG$8"LZo^"elQ9%pq+7E<#tJ?or2<mXWn>i$P:'fM
%FBB'*k^9/T`SJSIf)`-.S?E(rS/D$6bb,&'ZM"C7*c=4D3AdH0<\qLhQXQb7iI']1[;`kTW89`<m^:afA!\]2`\5?7=!9Hgpn)b:
%</D*;!+*'1](*geTL;A%\hY!/?<$,Xrpb8`^]g8hnN0=&-kSm'qQEkUIkHtJhT3QZ1/V#`MZflJ84Jc)T"$!"hC,IT:MppZG<-EZ
%q(-[CSORH'bhm>=dIjr'%OJ9O0Fs@_lG#&l:<"BOpp]LUXf:*ir+cZ3q[Qa!G-t5:*A_T#8o!bGpSoGt:@n`9U*4gfdbWh4g$=`U
%#jI%6PNQdFB4Hja\G%H2B/Re=ND1f5!C*H7,qq1/7Um,s(QAna'h//.F4dK<\35G"l$mA]r!,!9S=ueRG5X083@hAnrmB#/U!]lc
%_^nPVS<oM@58$&\(c(qe9E8Y>f.dIk?L,c&J0Td4SG$8Q&Y&_0bu4C')/D'tXi=AaDmpD8[m5&Rn>A].`YeQ1C:BJ-JI+oFq(hfR
%E&_GDl\u#1RVRconJHa`._&`2:n[h7Z":>tEEenj?H4_]NFo(dX8FVZ8l*<q$NA%\XC&U/bBpeT;6,6u9d24eSs]pl<FtO>oW@FZ
%/"L5MAr&N+Ib7a]j58+K`)l<)+A#6k.P[PF_V1?+9a)Op^Z1TmcEKpmgCWEE@q$LD`EllFq'][lh2Q7$pWFC5]oa6%1I&Gci&A>i
%3GO2kA'JfHoI^I;Au!h5#::U]om1:hb0<O>a@uq:WDRM$UhBC!R;Spb3qh8J^K():T68HGWG3p@06L33P\qDq:?nk0kVbrk<n\"q
%9e:EaokF<#+59LI]r'[Z[4?@h=E+$ZdO%BP>+LS+f.*[jdc.?"#b@8_D`>?FhW+ZY<Q`ZpaG6`4RPV=YPQoW['B=[G)sZ'XjAre=
%>,J9g_bjF%L9\6D%:bMF)H9@RoFNn4WQoe^mp>l:&sjLUas6E8rRQ0WFmB"_8aV`m*Uf^HXZVL`&,^IE>>$"60\0ML^e`C3Tf0b^
%EA2^pAu\Zr5H>9H:5sHqdajm+-"N+,"2B7)l6U/"e;p]qd3FG&:(rk5bX6,%DZ'\R^%ta\]CJljNM`f9dY'g(XIMDJj'SE:RdueW
%nE"PqET'oYrFWOmNelq\#C?KOA_XYj7K\':Gaj#.H;I:H^![?b`-OEiH`loF%)Ui$&V",S2H@dVSN?!<2Zq'sE;767[P&QE[&'[3
%9/EO:BIQV)NHj>X[jU!ib=8o+[tZcjo-BSXjVkP(f1EZXeB<idgAR5.(\)X]o(QN8aB/[RWL%PflUlO7<KR(N;X^:O0I>&/St>]A
%V.pfogNNlmK,M`fRQpY(Uea0T9FFTLZ^*(k%is'SW5C`3V^-V_)9EplS\jre3`?_U+ORmaK5+2>-dcu9Q-LsCdsdTGj(BGjHPL/&
%r.g8=DkGm1<2ZF\>!:0Z\>MfVqj>+a@)9G);oTAS)=pt'@[_><a4-_k/JpJ7<_nDVG.YebJHgJV;bE["%3OY^*TXh,cpmZhU.;Ng
%271eFosRR3U4XNI5%rUT:sb<e:/2!#1QG"\n\AoU)^X0K*81+)UKI?[#NiM\&%!YQ8%=(+QJEU=hXjEhX1_GIG(/NMC3?a'j3O7X
%hr<MSF*X+u(uNC*#.QRNHH3'5J*)aJlG*[+#;6WO!p9.YUfEU8@MJFMOIScpf#Bu!hCiHt91J,N^oEZ3lEl\r#lf);ORN,'CpZ6Z
%(F`6M[Aodi5h*_R.Q#:8K<_#,abaAQmWF%TBZ=uXjkKG#i9X'lMlKq!=VAW<0i#!F"1oW<6"XiKXiJ<frGjE2)*6/O]i.KgjQ?]0
%>?%`3P*QV7h.63dh.eeY2/!&;TCD5uVA6(EM":'#lr44;s#rkm"%OEEGfApG<71a6&(%P3XgU<n`_Dht17_5A7mLG10B%o8]+E/V
%PI%soG:/9N7j)<?*Q&me7L:rPeA0M-^EH4\!f7?4^"=RS+;ej@pKL@n#S*H1,M,'O7#SpDeaITg;@7f$O7("$aoEuW)Qg;P*h\=g
%[?lkJr;48T(89,`*e[`pir_"f"d/e_i%(s=Qkhs;b+NK<Z+DP+C6<+?:<;sMW#Q-<:^m:oD!7-mBW%!LaT<e/%e/'+Y[k'paf7M6
%LV:Tj,\l-q3k9sO&:9qW\BT]t@c[%\MrP8/(aC=@R:rj,Au_B.WAgP3OK-fE*];Z:c9Rj[5a<QsY=/c`[BGRJF;*5f('NR/K_=;4
%f3YjG#-E;PBjLe72j*;.ijHR@[G!g-fG]BGC/h62+?Z0X+;Jr:DLuM1b9Wom:sf*!MnSsu,:0H1irm'jnP!$SJ>/;idk)S((jp)G
%K[1E]@GiS(;k.7&jB3VSLckRaOdrKj^eD@=9pb\>#4^dKB-_fN"eLrS*J)rrf3m^Cers%[/<=Y5lYIfi5pP9'[KPHCIM#0D)m!#A
%RFZttWY\[<>B:31m5i-=@qB&j0J(?kUoU^$-H#1,RM)%2:c]K+-'<`-3n@tlXr.Qt/uTq.S^$>0%F@)Pi8:JioNV7";+oFR,7lW1
%W!^9s7LTd`R`5nU72kGG9ANBVWHS>s@uV9g2qANVYE*J%(U$Vo#`WlY@n]bQDca+,EX\b'1,'N=5&+VtKIQA[N^WNn(R7b?CQ>fW
%naYgU\_9[-,+j6"8uYYm45I`tO&:9IC:HHYq(I^_s.raV%Ik-WN'5#<5g2l'^98KXs$`pCJS;D/``a=S%FjoJHF*k`Uu5X4WXM=k
%>?/Sl`ZfjR_eHa4XHn<oY]bt)WjbL`1*C]he_'$1&2%D,Wa7K43!A4h#+AW$S$ZPC(i,pI8$k1oq'-WAd+J1f'4V.tBRH`+M5F*Q
%1C"gk`.\?sICC8%1mlc#N"*fNQ!0103#m%H.c<sY_o'7q!k!#(KDWX'qSI$U7h&kE#+36sCK1eTe*,PG)3-7$=+aR(7'Cm<Rs#;g
%$*YXH&g5A^%%9\QohN)'*Fo$bWS+k!oI"0qn_2fWE),\N7]R!b7Y1EO!H"_f.d0lm`i8i:?7.5n)hNdk!EB5^efdG7V5HMS[AmE)
%/7--M?onULm;!6FH%2'c&BjNM]Ntj>U+mS=?4WJfaS,Yi9ZNq+BHt4rXju^kPVe/g?M1!%5nqM;Pckt#D\41k@)ekVJiC8BbWpID
%Y]g@bUKJLHE<r=&CA8+1g^V0r1L3r>*[Q,oo[uo,hP27)S[K`QS+Lu.ci]hunQI'FCF<4q#jnp%09&j`7M6#_:rro?7^ud<*gV>8
%5T:ZLP\RMe[J2e2P"r^`02f=b7(MF/g#C-._kXQ7e9>b3E**3L;"b_23MCtV@:#co8i*FmcEWXL5=R\N&S@eZ4Z6nb-[!cm)Rk[D
%U6l)'5))9U7Z94^D>X,uM,M'?A,]0kA1F0$%MM*>PX7U7r9[RHr77\d@`Aa)3#f;a=106_="fI=Mifk3r)=9W9:6P[7E$DJ72<)A
%3/r%GcM4Xi^"p8Q,KsQOpchN`hT3aMGc'0d]p<38""if_/SF;-&X`=l[$fZA65-U";W5;@T%([)Be`P(>QDV9Jk.eo'8\#fNS)';
%)NXj:7I#uLP#IP(P<jQGC7!_d7Ooe@mIH<95!Y52<1aDA4DJcm=<XiSa"_&c#1uF"P'`speGtjmGHt_+ckmM<n_ek0bK'V4!D`1g
%W2Hai9u\1t28TgoXGI6ID);p5RhIteVNngU@cRWPC79,m,BKjcDS^+4?nlq*nc'N`ZA.!Z*LQ<CmbZsf2,&[ffCDjJj&7/.Q>-Yo
%Ndk@3oi.D>R_="SQ$\@Z$WJ+tUm0KN0;I28<%"QBEi;?2[/%77_`o'q<"nD?W_lRfp]==V"j,[lYImIj<N5S2.;<+jUnHbPJNAT:
%eS1iC72;d/--Nu$e`5hA?lc)qjK3PU<,6\Nf1>C;4\r&JW%m^CoEV,s$V.4:)%fh^Vn2O?]Y5gXA3pMfL6bK78ooqM).9)FJA,u#
%&+k-cZ0*uZn@<QM2d,Ge;7hmTkGSF0q&upV6^@&3;/_]%>E'Q&WINIo>(QZqA!EZ!/ql-P4$<'oYK;KZ'n=H/f!lltTD$Yem"mGO
%H?`O#\OO8+$)G6iLneun$!j&uh3.HSO`17u^%Mb^FJ$[a;o_$aGY`S6:k<-H,8\=aY@?Z<1i8&?L6"e26BqqHMaeQ%%M$A\5C>!K
%&u.79B'U4.^8Q]BI$2qnIkk1"ltAsf^HX<MSu5(=I_DO)X5Z!+G)t3^"RSZ&6S_'n$#E/0e7r65SYGkr&&"*VnO)LHd'c1?HA+6R
%Y=@iT3$oq/oYKR-WNW!kB#dA&6Q_<COtjT7"5SX7P_=JBn[<)/_3]mjLj"`YSf-dJnkLLBG,P9dN^rS].\0@se+5r!46^(EF;snu
%1$\b*1ifeWq,Z@V)O(5dS]'B"jH2nJAHl#\l#jIY;>2PKNLOO?2.-+gdJ,GKUkU,Q`/@i3l(PBM&1m<W:S9M$SXuZj]Y[N1i,"SU
%SB@<E[rMWbaVp$%&bQ^8``.8DnhVPZh872lk.QEinZ17!)kQZ30]3AVfk_r?AMY^E]fjE[6TA;I>=]QhB8;O3/oSIPqKTo)\$E2%
%3aBpI[ruQ=lW<b+qh9AIMiVoo0AV(j]md\*4]pTj]t8Dp4BjJ14[.M9F\?md7ltZ*<5WsR..-rar7-\qE-pVdqT8Hn9!c4eI\El0
%2qo:jH`[9`^QZ?Wri3KAC%s'db1!Ij5+R.Me^mm-r#Ro+o7_m@qnm;!s7K=Apoq>mWATS#bhbqSH?m\[cn4=<LMsM+X,l.)2u-*X
%s'fAO%rM'hIe2jb=lqQ-IP\W<)/oK&p?#*.e+S)L?!GUX/9D8X]B)]LL?)A0!fE8Xr:JRc<k#-ueh=A]S_UXO6&eIsbG0GV/UlI2
%I.m=e2ZuOXF.]X"2rN/[Du%*;hS&9UoCZPSAG&6ZM0S3K]?lQ7F`Ft!;_h]3k,s^8NQo\!rb+=hEokL8G4+nd6I,$`fm:")i-M.t
%no!qqAU3IEGg0Npb*ltP.M':q=$H)>ZdjbBO&oQ/BAH8OjO#ns?tjsts&t1qXGo02[PRU)j4a(QK8hb#G4r:PgM?1L4jtnJWQR6d
%C=m&G^YaJBP-Z8-p01fOY?,a[*Xo?#n8rYm`QqTPUDian^::D<gY7,FG%\cOnbUo9hFHnJQCVf=?J^'.rj]+:4SV>3DUfPRV(M#T
%"!!Vfem%H?*C[B$]ihXAKn@#f(DZVlK7j)j\+utADtua.]<Uj`cdW;q5W?j)rB5f4=PbNDMGK^[G?utPDIqu=\#-jjp-=8f.Ebq"
%4"FM6g!s$Kd+bIf)s+7V5LX;#'LR5&=Yo7GYd4-L$(iCSeA\?+LufQY1[eoHk9Or4m*?++KCuX:3R*%Zc<m`fppT4.Nuqu9Mq>-j
%TBFP018ia#:?LbKkob&Il)4Y$qpYEIn5/qucFYaU\tP?jH"5S)q'Kk$WMWnGK0akAaBtP*PY%[tY.(dNojHf3NtSl0h<^Z4bAX]+
%]D]TiX*+Bp=?h'-N(1oD.kM,unB&gn[c)]'Q"HP/=nI9DG]9o:k[n?#Bm6hDYGt`:hcts:lm``fBZmu#Ci>hemUo;h45G@"p5Gjo
%qI&sQ[I,4)'Q)R5F=#BdWp[.X(D\)MQZC^/nV<YCAb/LMDm`U[s6/]:8-qp7'M!.%F2"i@c>B_5.H$G=Oj<ED[67q%GZ:5tDm^CL
%_p@"g6LJmO;:HBuj[-+THV]rL^c:[mX4Gb/;<(]Tq"-rIq<<O04[_Oo5_jiVhn<1^Ts%OeBP_ePErBjMTAEne&q!mIlo+<>\F/pB
%nZkY3)ggtlAZjIa=CaHo59=N3&,)SbHu8ZEO(pAHO-`\b%[NaTJ(P9X]fH7bVSfkN`@&9go5ZF(nmt&#<dD8Yi!(eU5IWDG#E>eO
%2lD"/@E3Zd%_C=u<d)bTM)9EW)DAM8,A[5u%"-[_.G]Au'_FX(V<Y=RIe</M&T$RXa-kt&o8/G#b'OVqn?HCD?U%+p?G&M%6T:/s
%%hR$q:[LZ-\`1(s27A0#H'H(f4T6=)&rm?Ro;-fc`!@4<\dq`_]]f/L:]WtoM6/ngj%j&ch/2M[S<fau+CDg9.K8boo%$`4Vf+@=
%/)0`%V=LXFbhYXNe,5+?cW:LD46@0(9AEc8WAFP<_=g4(]!%oL]KSdueTRNaSf$4#0%TBak6K&m`TPhjrR&<645/-#cT-,,=5:ek
%>G16G;oQLRJ#9A"k+7:2/a+P\&>KjHs3.3kbgDXHVfbne?K&@hl1)!5*5]#:<+^3Z@%44mA*s1]EsGQ#d6]'A6LnPl=i>V(28n<Y
%L[d:26h7_'-T256aZ1Q6L^<&G)Tj`ga=6_>A>+NK&[k!-7GUcZ]i%1k#PC]=#"$3S:Z;GPLGnX+@cUZ;9h%V;=HN3VNE;eb:.V0h
%2k)Q]d0OWL*8e\ed5)E^:![5:6R].:EFOSh'pm!?i[akhRL6[`NJN+&iWHbL8F].Z$PQ7,6GBt]kYImd"4\WIDBNsSj=AZF?Hj5?
%%$fFCk*9OT+H`Q6f8+f68?P*S(:jgkpp>h*:b:r&2P.n0a[OP([lqD/@hVR%8T/'*]+lbJ+ep_H"/a:38E*K[7T`Xo2[,?j[@:.N
%&eQ@RL89hZJ?fS&h\p#7M7ISchG+r&9SCbN_]FWVA'7`9%d=W;6--*D]h)R_3WH+;L!\)o1WPh`0>QOodHk"#18f%se-k$2H3<!i
%0'o0^=Nj3,nlWK,(,cQ`S^St@)p6RAjde@!Sd0&cl9i\6O?A6R0M9>PKuUWRSJkUqQ_iV7FWmE'OgQ6_:Up%:BXhVlHmfacqTZp+
%MA"o"/Q;EEh)LCB`SOa'\MWk1Sp`EUDR/GSk.#m23cia&X6hGSf,!E(<X[[M68OEXNgHL0N-j4SGks"5R*-P5B-Y'l>"ggcVP88M
%k>h(<m#BHZj,ADpJ"5D74o$k3JW0F&dpD1UgK3T+$eeo?h!DH[rKcpZMcLUZo!<ET>,4ZD(8KmsE]J`u!aE"uf:VsWq9)k,PI8Q\
%7rYGO^?*ubf<tJt7n63>6RCqcNg:kX7HQQ@J!W/HjM/DlcW.\_CE&VJKe%+jT;WluXY7,2>]([,X-)-^4PZ.cVl2%DB[POM"Wl6Y
%0QF=^^KOoh`]^u_\%[@pGPF.A^&1('<nVf10#fCoW`Z3?"59A"7+!dD1jL($T$n69YPJ@F1)*mcKoSci%#[+eD6^ZBoAJhX'a'LF
%4G_#^&uk;Yruq\!Q'VkccF;U,mX+gDU@oU%d<:M%hKE8^><;),@>(NF"<Du;Q+q^[]F.cPOOof@4$46,SAcejAL$noo?kgeq.1@+
%IsU[YYZ(">d2(N+'<&_/b/:WJNa4.&B3uZr"#o[a01@(XqgK^[lK--W6@PmRHkGUjj,mg.F>&Z=ier_,'M8$G-aXCC3&\>5Z[;#]
%>J'(]JUW#>__@rpA8_sD_=9b$N$e!SAn=/=DmZG:U+aB:J[/Ub<>Ab;?D>5"7!T@Q$4$5&X1K,We4Y'"2q+srT=sd/"[/C0gD_g&
%hhMd7qHgi)_p$5?q(%EKe!@H@qOU@?5_JQJZ)d]!GaJ%+g9bMEm4OC*q[-"JFS"1<2GW!gk=tVYHfOeZ[$4P=bj,.dbO3d0birp3
%4nPsb<=3Bn3frr\271oIW=I.M<==f0@="]'W2IHgQ<R!ANV-BdEqE%+1b8/GIpr+"A#HS"#u9M2<9V3I;0AXq2a;!!>OOd>l#/=C
%2F)#d-r&`<nbehDMIWu(m<A0dj7;L/qTH'$iL4n(h(R9!,+Aif\D$l3W8uReD/9G$II+.Cqk(Wr8DAa-h>C2[:>\5mETPfX[DOS$
%eme'g9-\f9eN\SoO4ub>:TR3'$&c/$(!:jti1%'drq9Q-j7<#beb8jOK%q'pD[u<n$d:uu._`IahKhqV9C',R<>HaJn!%2g5A]EZ
%k$aC"%-p4,G^qJ"s5N\/Ial.2VHQ*9Q1*DDSTCY,.=ZW3`rtqX9&lS60t/q\G=kBUV&h9^A2CD)DSWipp[.\.b;Yj<i\o(PGI=(@
%c,K)$WnYc<*NslpYC(LG@FX0u_6K-8*aYJ1Y(>FDT7G[:p:>4WEP9rXX1%]'"s\P=Du8:qOro+'j42C6(X9"fqY\TqJAEq7T6C)#
%gM10%i@aeNVd:)3[&At'a[Mq2Y%F^ljV!g?k(C(LIe\A=UZnfWbR$BM)aLg%=,eRpYm=pS>e^!aO7H^:YIGYq(NR64P<$m7C:<Ci
%E"m0N>@i0[n5Y_X9f=nX\jX.L:J:.?_W8f\A<'Hp^\'+uK6FEgoUrn2?<H]uB@a]NgrnKBB;+'n"m_/]=XedCn!/ooZGp+Ndl7,q
%+5DLf7!Vd7gj`@HT:ZiZ_Eeq>R0Ie\@;WZ%R(:FJ4nrR?lcjM]S>=;kW$ulpZ*d6>J\(SqF6VZ#3@ajecGeLmB&"tNg76V^%o3Pq
%%j%8ALWa<lT>,PAPd]opl#(.s,5Ym_\lh7"ej!bA:ESDNWQ_]^Yhc$EC'i]EZ:PQ*4<("@cQ<jAR8;a&DXV"WY`N3P28_6qe*Gk$
%G"sj%H[Oon?a;Os1TLpQ_0*T3=DDQX^2b.'D%NV9^3On.]t)\3D5(jSXumWLL7c/)gtC!ln*e#?rq+EZS;:8*s2A/E9V50@2g[2$
%4P=Gi'@>HNi;0sE#uY0`e/ppYn\L4==BD&?0+1GAO#i[Fn("_nldHY'bP?2'?&@rn!,[X%oFGlC,&>CL\aee8Pbr9,pVH!9q.8T%
%rmKW+jtE<*(>Ro9en-((Xl$#rC6-f9$K-ZsqTI[J=oQBubr,4RZr\WUKcTi,Z*9f[^)r=!gI53M:=lSFL!3TK>%jB#4g2HDB8W]Z
%9-Bd$a(ST(q%nDP1""N-P;ZLR8+-i?9'7/u^4&qhpLH^H3;59ojD$B$oIhm?T/ff]qNJlE%RBD[qfB"?[CsqnKdYrc;-;VSA_cUX
%QOaH!UP"cI6IPoro@C\1f!?HWBMo3+#X1\+(Ms:em#q[b%/bId]t'S<)Vbd24kdk#o,1s'kl$_4_+hpObeDq:CgVQVS"fW!951SW
%TL")G]_[)%2^cSG[WHdUYRU9qIMi7R(R`;9i=e5Y)Du(tqno(Gj9,b[p)duR!QRjVHRHF<]*l6C*)N)nY(YRZ(-[9VCd03FKXNq`
%LUOW%o'+'X9hBW>XHc96ajQ%MhN>&COiDR0p+/.M\+E/Vj&u8_AR=J'`A=X#Z#W'doD:C>?HSc!bJN7s>ur(];V>,a&+GKlk2`7^
%aT85Mh7q+`mQ4c%#AX-]o341;U\0AQH)kk0p;X/NUWc=([FW+.R'$9mXjVrH/6`2hX&e3&_1Fc(.l^ek`'d\pTNljuGg$7[_f6W2
%V4EOao@5R?ViT\`g@;oDh9XZ<+%^6kW+hDjo'GI")"*8\#LLqg1]dJu`<GDp*!Z!0PAfB>n%B,GBelPm>E@YV*d*s$f'$]h'S:j?
%$Jc#b[ci6%:%)&f?b[Y!kP*-&3r/`n`<,J*md\S$VWu^QA(p00g:J/C]oUpK"8pm4+QldM\?-!Ie@q3lX!d)7AsR23Cn173*G+^"
%mUjeP#e0oEV0'<Jo(,;ZnE$uW6VZ%I^%i2E69Y"JdV=:gSgCY7gjFd_in\)Cnko"0eToPf=u`^_fAbUc5-J5-LpWf,l^sM>E(=WQ
%GAQoJ\dhJeiFRtgNuP7up;L4Tfkkr;%KRQ_4n%3MHg0Abr/:MLht$d/kPNZ"ECB<8J7\V`$'sXgc!%kAI$F8CI+F#8lhU.hH0<Xk
%@Jd<Z)W/rKBYFa^'>t>MYZbtK?9?Nmb3n[&kO`TRi\^6bIq:gDoN8EGL^!K&>e&HtM.,)2iP=^`grdiHJ)'s&a;f%Uf+6Tk7Qd/R
%=l33Q3+'gR2u+hd[?A5&n+\sd0)'P+PU<)o^t_.'i*,5RSCR7[baRm]"_45HIBZM^4C9W"],B>ZHj+E/j4/ONSiM<9olMX0Za%%j
%gm4NYYJAe]FAL(W0aLuQdHIY.=`^QmFZ)>Cp&((c3X*Cb"!MA%^=Se57e)DEokiq_%]iOOfuKT$SX!"(Hgn+;Mc.,303F4[.O_[+
%Dbp)u([q93R!)][GMf#O^Q?8?VpQ(?LBAeWMbh0ZY8/0]X]Ni@JOB&<%/,Tt=e[?=WG8UP4/c/Kf'B+%)GJi9.tn.L&YeSma"-ua
%H^BW6"!]a)lclo^%':(pKqc9;ds-\-RT=\*iMrKaCj]E`7+8ri\$5d5#IDRN]A7T#F6:Gs,puRk/1GhV;sN6>ll84@:L/B[J"pts
%nn,S%S$8U8SOUq'*cL78mcqCQ)#)CJ(suao9ku]:psrchP**Z[VonlAZ*!K9'WgbMD[ms'`.IAXi#<aP*q(]qT%Cih#pQ=W&(C@Q
%jTh[<Fg^g[Vf]1AVQtlag+rc4h1(*QIu]QEAh6IOakknL]\:W#k3R/F9Zn!'YH<,=7`I)Le8[#8@V0+sj4!=q?/I_Do:N0LBp]\r
%WG\mCXb#^r.`4ZUC]_p;06O2^BXcWQ8tFE)*k?2?CVOn$SZ]^,T^CN=c)t@(bMGV\l>6obI?+'>A^t&IhT*YrDjI#[^?(W8X*%V:
%c$QuK.YJ5<q[a1K^=^DHl[l/:hq"FY_8?!3Yrl=$hKu3j`;AsEFK:s)Zg)1LXs=p0aD=\\@ASEOD0ODSl"qlc.EB-u9a]de/0Af;
%D-+HZ01N0Ff=3Q.GNfk#4YLGS^t1[.ah0j7=%#u02SW'n(%36bs4V?_eXR>e+?O-Y[!7/*`MV,(G[Cnc5GR4lTuB&!"f+!=XZir_
%nfXaB#LD?p(4^E8:VI<WEDm,!B1Q"!hGi3REFo&k_bgr_&5b.EpaU90ebZnmOQfG[`9Z.k^Ps87nEEY^2+4697;fEP?\TYSn%eP`
%&h2I_>#B.W`)j$UNooX%_/Kk8f!+nUCH;;BEuU]n*Va%5Mp%5R9m$Kg<`?&bSi.V<5S>p(8\:i%0I(G6QCU>n`R"TmV,bR4^F_s\
%!FVf?gU0p*GY1o`[]6n=FOQ99!h*`!<RoS)9iVWaoc;D$/T'K9gt93@_6]T5ig\Bt!2M'4!<?NL2/RqY]&do&7U!3BTZVA\+!XcS
%TUpm]9`c4;d#:p`QD"B`BXTdQJF_pRR]74S=<H9tP3H@3>[1:W\mi1L/(NQjZ^DHMNoNUqc5WH%8=+%#qmMpD@!G5D!*"%JJJPJd
%Tn%Z@eH#^(G1o4g,K.#eZF5t*>XP`5V@=2NnZ&A$3&irj898%$cqMp:=L&M.CGn&R==?XPMf:Ki7N7'o6uSQf!XR1^&@c`Dg&uP#
%[@qT\&TY;-Nb0GC$@EsFR\2UlRcU27&Hol22L='Te`'P*1I/>fOG'W</5F]3*J"ub^!7k)(^+hd:4T,P!pX\:`)T'f"gs3l;I"?Q
%;V3J`WFi]"AV0W[1nd]F\%-cQEEVM:@/r\#nL=7+$g`H[6\s_=Ah[E"Kj*qYTZ/+m.Vl5jRk>/DUP&CV'rL7-RUKA*JXJe+#d"u)
%irl\<cMF^Z/^-&rJ11n=!Ed4UGaO.B(^PbRLC)s-K4;A&<9'="XdD?l)%X]<R:W]#Jj<J^'jV@Z;a5,M9N7*'1^onk/5N=4A"n@e
%A:`*)doDJdE<\3BD*c53,`3R2'F^o)J-NSE`GHD4ejof>4gS*eZrjb'S_HCc(k`eo/^P1JB82F]:"UrL,SR7+WORq0JnEblb%;,W
%V4LS%[%t9&[RruX=^o5glJ"R>kYPcL+sqi6o0cVf\4d^M=uE[o$4E1G"p6mhL8cn/:MVRX8ORV?-I"E!?F6MYl,&*LWNMe8*Shhp
%R$S^WC_mi/J11_0'Xq\ND8j:^Wj-EC1=/u0$\3cl^uWH-FVAA5BW4uJpsXAo$mmSMfNLg"nq-ET:;PrURRV?e;`'Cl[>>&g904Vb
%7(gFM!!ms`JOHIp,Akli<+581e'tlf"8P57:gf$h/uf<'=j*Kn<7@uS()o\[gD4K-ct<W%qZf2f)8"keS;&o:">:'\(j&lR%q*Hu
%e7Bn0JQ3?F0$mu9pcrR(>&--kT;s)+h#VS&MZI6<<&Bje["7P3Wb?s/LV@jIKa:)!U^/O_J3p>tWQ;"`7C(f:%h_8A6?3Nc\q0.i
%)AE4gI"6',73-'7^-GUfLA8C!(7",!0X8J-<rs*+*OI@`"9G>b1?/\`*_Tj1A2cc#9Ih<cLbR=qS-V.m";j#uJsk,*73)Ft-+@08
%JH6@e/@h4M`IS'#EF?jf0Aeo<kPkB(H\#A/ppuK0glt`=_*oC<&h4IFF>,]^fabp.*:gmE=,X`P<V1?O)-'Sf/(A5$CN*.)FW;)1
%\-AfeKhNb6XsiWXn<?="#G+Z'"4;[B6(3m^kQ/@N)V<i$=*5N8Z4=2[r$XMkJuYZQV4[*6S%N6*GD5uQ/[g\l.qq@/44O!H'-n"u
%,+\$]n6jrH)_k6K\]eB!HckSaUK-@CV!n\/1cWN`#7.!7lHc53HbFmtlH;<Pg-6Eq71;)\DP\,8;X`I3O[O+!&a;/TBZjl2#7\$"
%dc;%VU's^Z=+\J<DSH,A%l^/ZqeI`1k_,e,1ChmV2M?\o!C9RVFG0^hTi6LR,"MgdEF<XB+??e5i$[1@#mA$f"2Ro4V.UO9'39CX
%r<OUgT[nF?`?$/sH=-uPp&e)M,""W"[>82k/2F,TYM`Pd+P_F<LiS./`XCN7.H[s2>S;Ql#eqAMcto'R3$^1"/L(Na]bkT)9R>Y\
%bJGNt?ltsu+s92\>mM,1\1L&ND'aWb"@A3LVPL*92<pGG6$hW^5Tr)B2'kqLE)[X^01/&],%*ZQe5X4\T/:TT3i;I&WMge"$;j+a
%Ud[OX/mqbiFYaMiV;_]r;o-4@8PNpco>\ed&ELcC1kNOE<`J_-UM#_"J6d%WK#FJu!h%c@WIUbB7fg^@P(lfNf46F'^WM]OlSTe5
%;,3/LP73-h(1M7*2%*lq=od#O#+?+;'1B+YGLm8H&eO^(&Ye$3,Db,+NIaDl!M[*j*CDg.9u2^`'*N[a:)G*Mdi",iFb#"[XqAU\
%D20:C@l"7%&._)e_e>@PF9,O'AK!ru.&(R!gAhf2!DjGh)7V)YK+tgTi4]ST.O`hI71C<F9uCO<aAbi"Z[aobW/egsNVcXsG4lM[
%;K;hhMIgen4JrdcROUV=LJV]1K)ijr*n20^@jG-b#tm'BcpZ7h66O.l$0!pALMU')W:J^Tr./>^0do=qjY7UHJsFNQqi'b]F=$u)
%-m\p(bN>%S!YIg-+V7m\Pi6Tka/4[7EEn5X3"<qH#G?WV)?MLM6S1gU"U(#7'P^L@M@bS:K*Mk.O^Z*r"CtoG\TnSG3!N\!-_<_h
%.EBi'"LJUbh\;1]!&Y1P0Hc!%8#Jo'Yq..BnJPa"]M@CR%nf*acH)>@2d`Irf`FYZoUeHeLo=RM$3kkco1$,B25+Hk#JrDB:jA%P
%/^AB<(%*h*N!f(u56t[UG]4Qe$joBG)V78_7#%NBOUlaU$M.f<6"HmEr4o]f-q)SG,_Ds;n--;'a;l4ql`(!/U>hP.+?YUf*B9,D
%\,lp_1e#A5Gb&BZ-lRlO#31D6<#ZqhK-(9iS9fo,a!@pWNob9g_?)P0T8gAuQ(alL('Wr[7D*"H`u^bbTP*)f.1e5Y"s\a4'e?Mg
%)OM#=8GFm%MW/T"Cq'h4&J/]84H^*0PORP;jZ"T`K3X]$C0_5oB)Qh(+&k*l-/er?<kniWX\j*@Ar@TfKC!l6*6ELLE=d6HPiac@
%SuODt3Z9CF/55j"KNbu?B*]rA$YpRfL.c4n'&7[CX0EO2"a&FTZ<$!f"6]-,Z.176L_D0j[VS2/@^r:ci4pI'%rJ]AKV5%>)$]8n
%.EGnQ`=NCT$"?dN)'CgBa3l.3;US79e1_lf8^mGI`)aDtOG=_c+TXI&(JX.JW"J]mqg]F$_$Rsb0j^n7^?o.O8l7VkAW<*O==;Jt
%WZ3e0%+R'G$$.)8JSO,SaEG^7K5G(h%3krkF(AemfX1]hb<98Ps1K70gLQ[[OX)Z!dtNq'"Q15*q/&`?'$sI//Ttq2+nkplf%GYR
%fb?]?Lb<;0/VY+N6NGB<\O/`:q'I"9d"GiucnSM:EXbGgc&SWtq?O:T(Q&\!h#6>k0&=?d)Ar]W8rF2!plp!"oRR#-BHo7RW.Rd[
%S!!b(S$!Af-=F?:i*'$D?te>$(L%7#L1SG[M4KMp#U%cc"s0Js3"Z]@;do[R652Nh7[J6UCd*LT6ssLJ0VGim!sUjkc%fPZ6j/V"
%+Gl*%c=71k7RU%BS>VM:'4jmi"\]VA=?%r36e=sakUA&(k\j%_;.I*oU@uIh!",h35h@b2cC$3Rci\ebM`tUjjiP;^1f4i`X+l0u
%#AU4EJc*kO)=Eo\kdkH3:c]G%im&ZaTWHQg$WoUK7L;ns:<.cHMpc.5COiCW9UP&o\k)Vh4hM-&,a&-c**,mi4D)f=rD^PbjS^"$
%dUJ4L[h[8+b\3#Qr-7*S7A`/V.><d/\qOP*H%#l]FDadGe!QQ1a^tq_#*0Q*[J<JYorl]KTt+XuA=uF^Gmdo3WG&"q$Q&pRMi_1e
%^1.`D2e_$)J@($Ufr#\6<"1Do2%L8fXfYPj6ib?NPQeiH"3F/'O2;g9U!jf800tC$C+K>hoG2e(Jh>AtaEWbfEW[Rf*&YUk.bbLR
%fh"^/k;%/l9j"Ego#:s@#A->aJ-aP>+WAN,(G#cQKuLhK@>-s#5^Fnp*s@->*0Z?#gX%q4*5[J%ki`>t&a`+#=dKuXUIub,clY(d
%n^o?!.8;0ekgC5_NFAiHSu7)^?V\D9!RXIY&lBJG@h_O#M@uZGO_2"&gFX"t,1'=1)%.XnJ61-]"Gt,J!63#N!X]E*o-'/XK#lap
%62/QCF?4:Zd<%9kh]Bg*a(cR_TN=k[\7'2r%<mbFIiTm?Ghb?ukIR@-?i]$cWu:sQ._MDS8I&1e_$:.mI:0O,6e;X=.]u(OSdX#(
%+#MH2E,Z@]e]DC/*R$o3();-`7LZsL2,J.3`X0iM]lf"4I\OGbOs^Q1>7+Hi30mtX%mi+'*J2KDN?(bHRt9Np*00A1TT6Y:RM]46
%8;@rtEaQ*."LEX:d]'_^kUN]n#!ke&YYt]R0er;YBPd`%!Fe),?rG"`"TYp3@?cb72cZ3:,LJNa#D]q`?n$Bl;<Cfn,d==Yh20FR
%5ZhZPDNB^%5X%5RPH[jsRcRqf$q,(`$UeuWP7g+t%r#5:+Kl;0;HW&aL`e)OhC.?775$"N$(r0b7KL?(@iBo7Z*%Jl!"06dQaCOC
%QK6@ZCZ']R.OHC73IkZ@VIk>]TQNojaoJNW5RX@G-tCd3L`MrE/1W0KTb3:B^k0dPg<i:oqRR"FXlFZY(eeDX$77@g6'/KLU&n'=
%@&3<Yn@EK-Hk!0d5R:!m,C`4]]Fb3^&HWlt/7AQh-;>NdGKTep;h%JcgLL=Q10h0ic7S3=BSM*kRl!Je@0U2Y9`khlBbTg15UkSH
%QDQ1&@jK#ZLeH$U"c<:P7AGBEI3te(d%A0@J3J6rCM?47OAh+5*Ccab9.UV&TQIRgL]D_Q.bCnT%_>=:$J44d!9QEOa[QAj;R2u\
%Q!7mN!U$I-Uts4<EFaGKN8d&VKp\RNPe:f>_+;C5=HY+dTG9#I,FLlg?*:'D9d'KW:!k7cBNmg06W47%>JjEtC^REu8s)gketSRi
%':D2-#ccB";i%tP`X5D5'9mHjV@XnMLFJ]Z!#erf(7@LJ!u9RIS&,^bRmQ=sV%]:a0JHn7%ET<q=S?90EDqZR*CmL_;[<rZeD81[
%\h<+Qh3]WJE*J7_ARGig8;<GKmLGXOXCffgOY.):T`N/dD.m;a&PY-Aa:oi6E?-9A$LpF:[WT\+Jn5%Q3?oQ46:3Iq*[t\.n^XA@
%lpmoa,cPN`,UJjF-T#k;.Du7\[50RlG%`R@;b1%)eW<HJjlR*eRR0]>R8g@>R6o,T;71:T$F);.7<V$sL`6jM3S>*e;4V5)!<?UT
%S&4%8oF">92!L+]bGGgpIL+Q-a;!>Xn#46"+bku6/t52OK34?kPY@d1A@T3]$8#?d:f0SYL`'@<_oS\df]T!c^_C5mM5@b&;b4cJ
%29?P9;uu2NV@]j5Xcp%>m,NH".3+^ir2!tI@%0GDWON>#!qj/@LUrj_ZD_SB<Dgi9UBVQ(._Ok`g(76Clo4B"K[?Ckd>6c@Sd^]h
%8=dgE5u!1pDZgbdVJDQ(""?NE`Pf_Ml9rN(4N)BALmelCKlI.T+gfB\n]YGJPlq\@,(g"UV1EZGf@on?.#Mt;W]god<+;N\6q:<Y
%Z#F*m5[u+I_LC]V./5<I@i,U`M8AIZ>nhDQ'A`g#3UE)"5Q/?roF@]`'l[+uM+)5a:rDGD+U-K93JDo<TK&\<c9PI[VA-K(En[bd
%@B@,:_BLjKj.<''qu:*dh/3&6-LOsQ?l`NNMQ(RRS^F7mD^`8Ve/R]e/6h052;C^A>3?H#N'VA<D1WOP>P4PaLsd'/?`mi'_6Jgs
%MN.q6mK"t+AI+EO+;'P:+AnHCHbgki2J4aS5mc'1E<X$4gQhVs+G,n!5M?2kp-K4Z[Y^bC5^jUeLIf>h:lZ(["G@.rOeDf2_;d9/
%E$tVTapjTp5:aa3#fOk.egm.+!>U4E1B\j86)k\keo[l./HQ4[9DiT/Kn#$u1oIQB.ebGY4[Kk0+q"JM9O3)epVb9@2V^k4'N-/A
%"1"cc!p9>j,M2(s#$eKg3Wi<@X]Z8N5uu&fGggC<8=#AQ$<(#?F$=?!:/,H%\COl!0Gidf@Kdt\:iHgPq/PIOA=YfE5]IZ1:aTC]
%/mp</i*&*LIBlFNWqVG:oJB9AHg$\jG>5M(!2]X?L=1[6+L;RmIl96i7:p:&='P`b:l>fki#jGTMsGEG#shhfK-1M<79;WK#3cc]
%%HEj+`N%R`@WEP5Kn("FWX$mP$42d&=W7M1J_6]4S[Sh9aJscE7u#1ui>2/GPoJ?D!1m\npU;8a$lVB[KV^=$i7JnMPd#g=mSjG2
%@17*d2UK>bb#LPN#4"7%r/-JZ?/<F[<f8/</5,#T,M_u.ok0$#a^KP'O<[/kC(tc-.6IHun[Rp"U#9pYKP9S:BgE;!'(;5TRnC[S
%/#B3\[YUUoM&$b)Qu%#"LaF4\_/pI>C(Qu=O?-g1"=@KUT3p.rQ-pK4pZX_>S`o(;)^]R(nCfS#k)!kU/2T3Efn4Z#=fZ#sM<b=e
%OjZN:9p[ACFK.)c3C\7^KCs0$+k;5a<'^qedN"O!M*\rnV$KKNDZmq1+?claC,aj8FKht\X3nEW)'H@R3e_ud2@1!jTn@KL5bLgQ
%f)eDa7)tMn5]fa=QWQ3_*Ufb?#LL-bid*8Wj$,Rkm8.O)\,!:l[FP`(A,nt*$%c(`G8`$Qic%J%D[bs:Lh0C_8kSTiNO`%0FP=`N
%%]s%[:XbtH4.pm0\H4IH)U/=W"eaa`"p#_O$$RQV8L(H8R)lMBHsJJZY=6]Z%4Y'b-2gpq#1<h'/%V08Lj%K-W'1h]BX6fgRW)La
%RFEgo]9jDNm0[i2c/G>OZre'IG`bX__$Z!TJgZae/m<h*B,E,mX,2]aSLRr*?oQJsj5G).#fgH?[%;&X^=uQ'K,uki+:*!"8<qFL
%bsfl$A\slui?2ThVlbklEBH8'\qWYA<"=aChP,XF-7h(kQWH7r_uOujdJjsCc&Se.:t/aMbgq#^=L=&XL"M+m5f?!?Klrhm;]doB
%$lX1VI,Y&Hk-M=C:7*cYs(QY<Xq7\oNf;8]r4#'1N!o*giSXtlL>3_?GW\nE+2VO5\A$=0>b48igKZSVGS$(XKZ4>C@Yr9PD5s-^
%YhG8cCF\=g0(0jS?)-0m*AS:/KV$,HUhqn:Ne8]bWQLPi)*GBhHa#!N.+:GVmpfIIMNSV2Uie/d3g+)(/5)HkT(#^^U8g,0QYmKc
%EAb,FjqNPHdEsd1R%G\a<'1Y`3!A5=-Puif:g@7$27[NjaALHd%l/500utC:BimDh&3%[)!FMid@Ar\3Eic*\36b1N(b@5FJc[.O
%l_="E,sK([cji2f*H'Pl=g_C&*)7di0Zc>`TQ0:'*+S'k`F.&mdC6d$+1N""#M\0C;_=<**fE4tm.[[oU@OiGap_9l6<*3j5D(Ln
%>83RVO]EEj29<_YEE@r-f73E%ppL0k/9iB>Xm`&sBMiS@Pp;CVY]6hmDBV"K$>"7"""tf7j?f(8],EgB$&Q"7FX[fBEV_eMn*F!F
%Gn>V`N#m0ga,at79TN"$e,i%n6)-"N?0o`ZLl5e2>p7KMX<J0W6cHiUIb//STWpsqfg"AFJ_&Ys]aB'$.u6b?9g#JPlRWgO^qeJ0
%elnCclC,(8O>:e-KM]i;KuD4T>Z<s`)HN]<@OBr.%2KX.]T(Ib_HNZB'O!clC&sTG20fp?eK'9u[<*<dXJ].=q/$5WWeiJI.fg)E
%,WUr,Es'/^1rD)Q6GZL^H4$f.`p3Y=^VE+`mXi!,`nJ5)7hNcBE5P(0`rPjo9FNcIH3/&SWC;S#:;4%<eSLb#7^22SLZN71*'pr;
%K4[b-Dn(lg_Q;\@+)Q/d=S>Eda#(5!6gN+-SKjd$F&:UJ1N4MU,(bO^-S9pDPC+FUYRn5-jH%)#8gUH]"bYe=@CP:DUns&J%@nQq
%];1X&BE9RN$`6ZM^6[D7_e2t%AS9$b.l&s3%]h'Z$DFYSY*P+I&@k(6Xr&?l%l=WeNY=hI]\SNm7XNA/,10kW"SI!4eAU2F%[`1+
%W;oJf2e]=G,D+t_cRP<l7'nNUQ(XI2.k^M2c5RM#iI*1*->NcQ`H5OFag:2_)[\QEqU%lV9+sT0\Ii4.q0j0L5$3t70s)o`M@bh,
%NVP&o+>CbFrQ]1R,`$BDV:JFfNLB4p&Cl`Q;2&Z.0S+dcD$gdR9&$-Djki-pV'4mP2t68>@U)JmP"W9<:JL-]b"P_Rd4_C-#E-34
%=9a`?TJ>R?"C6/C<\3,RYF:!1m&ZkpN=uCI75-/,MXn^V!'Y\LbFeilUF:\S!)VK_LXUB5&7(ar45<n$O@5\.NYOpkUWdMIM?eCi
%7M@>GZ,M#a"Y_sAK1?/pW)O.Q8NJWM<a%p>f\q9:NH/D-W$DiZ3N<`[1d`o6jimg'O-E/,\.G.$I4efbJ`$h<:lDtf9C0fOQUcNC
%[!.-dT;(q]W)t<?ogJ-QU8)Hb6'qkJ+@oJ0>>Wrq`U%X'[oua^8=N0h?JC'3*L^XIQNdR(;Znjt<?)TL`Vi7s-q@sTipiTpJT+P7
%T\J280ejJ5W$EUoWaeY[rc,La\+[B-"kQM9XbDT\!VES#U4q'[=Ik$"14^GC;T%O0<-i"]@_q#5]XG\DKqWQRNemtC&f<SXYJFBV
%ZnjCBQ:6MXMTLQ0pa?mqOc;\__aW`qK4r]-\iMCNJM&Ap5TVmG+D`F0g<cMcaV@_d[lCnu%6Y=5NK*(hGhi]:R#;2t'WsBhHQ$Q7
%?(LOV3Z1#ZZ@k]GZkE9a;:nGD7CK.e$n?i?84F7[/b3ZWUp-?2V4HuKi?!OfeFo>iLESK8q%t`)'ou,[Z[tW'=@^9l#n1u(7CS"H
%i?.>2mWE$qVViP7!-:H-iBB52M3pT(6Xl@+<l(>5/=E:nL,uTdmF,<ml`^]VEg@8P0Y'T/8qT[S%^%3jn%gNM9G7o/9ng,=I1l?%
%%&g.u;5ZAlQS/cmH0(eSZ)#jgDCO+GA&Kif`m;<@M'n:F;?YC1:Gira*#b,?.@_^d6f8:fO%b8NrZ(*:Y[C$K0*PC&MJ/)2e(/X7
%A5!ThCH.T%9a%B$=Fh#l>hBM%M[/d&5:2rbC^5:WkQ1mMU4OkJ)Q'[#2Nf"PO-4.965D%YLfuJe5UoJ9l@XHt:ig[R3HB:V][aC!
%V[:]@o)2oV\`g[n+jquB,,%jfJ[MGD'VSf3=2\L4C[/_UE)i$1k#mJ?VsXm'N=(ig=8lVB8mW&@CiK6>_KF#CiG:>F=r?dq5WY"q
%fKfa':N2chG[-(^:Cehb')#aQ!ATV%co\=F0F]a!FOJTK-u1E*0XjH1M1$)b"e&[9^Hu0rc[m/NqrS__Tj?)#XER64kZ213&"PTc
%"gD;A`K*fhF)I*2@9PeRYV&6^K/:pITL'N>5TARNAoR\Z63SHu>s[l/0Xi\BKkrAH6kCb(KfKuh$J4+,,!cQW/ER4(ClE)^P"$=(
%=T+&&gnO"98'uCnL;>e9"_%M=CV+D0WFQdX=<g@8)47^+q=qFRdtHk7JJC=MX4tBqI/g0Ua(WQ(`0-!<nKLa[7o:h2.VK\O;HZs]
%Osfg3MW-M4k#*A.^81O'lKn`I<4F9bppA4eIg@1O9T)+M>bdF)5n\!s2.#DNMCBURa?h=\F=C1/%$[b9OVA%QK,g6>)_>I"V*o6R
%lLIq-Tj"9r=PSQM^i:b`S8fHgWS;5^C-4:pLFf@k$M&ht#QdlFq0S_3>W0c*cT4]d%pTf"LrC&i5#'eMe.$$)LKF\A4Q43eG(QN/
%oer6AP700Xa]Uq1,+[#!&\b<6_KO;j#6Lm-@*Z\Ykl?0&]?gN@H:\c+41mR]Eeo60Nhm%^1Mfh`CUD&kM@:CM0l].X#KS2"(><c6
%H\TLB'b*s3YmjQ5F,(SE,L(KWr"^f^5UG&M+V644RYb0">*M^=(ZV%Te5Qot%H2m2F7t'%&^\icLj5GSlfKGt&IYCg!uEqQ3pj#9
%]&Y!.T!K@_3Jc`]OJ*"E7%J41PT</6$\SU33J^Z%:8)[k+CZcO`S'T"dUj,_C5MjUWWom\)&`4)=DBC7qS5=kU^nJhM>;oT<mJhm
%rh50IL_f'u5K&eADWu0@&8esE&SUAM)F4[9j<#;-TI.(/r'NU8_0DZ'LacVQBLDgH^frOF2'DN%;'/Bo6MJi+!qo"UcjU87AbV:P
%0U6\$JU<1j%4\H8gdB;PETU,=%s>JBLttV\*o[OH)A9W:3..G??ZH[^MHj,!#4<Z.%hmZYgd@VB$1Q@[\VCG"r(,cfl?(,S3U;6C
%M!\(H:!>c=>V0#=LAi@i`d-OY4[e:3WFbgcN_8e-&@dMJ^T,E4+kCDoS/%=E6^!\7=H\$0e"%3.RW&d7a?ftSpQ2gig#ERt6aRB@
%&I@2[**dXiAH*38$EkDBIqYjPR?d\;;\sXma-Hfa<A*`*#S.OE'm^gDLnm4^qHre)M%a29!tUNodFn."#8'Bn\_<F+86,4#SEo-M
%a-9TJ6c:\mS&(8C8?/ftINpAG@u3hUcpPb9AZ<>U(jUq%NG#'p4@Cq2]RgG#d85FiC9i!&@i*"n$P*h$RNkM:n.="6M%EGQ&.pCh
%:uELkdA23Va?r@WE:Y@d&Ig?7[g>2c"GsW3n.9"Fd[VJG*(0mQrTGXrkTCeT&mF\D5sts>U`4@ddHZ=1Y=]:6s*F4!%O1bi(0,b(
%%O,LM=VjF9&Q@&BCA2t/3+$f,lgYP6<3o*t&(.V5kn:R`L+1DR`*>^J&B@@0(X^S2XU&3#6Oa)efgR`Lo,]V&&K3Jc4ptZ7I\&pc
%Th="^VX,M$;a:T'+rAYVK1K0h&P\80B$<[HTPZZoLIf$JMX2JrYmI('*7KWp,41$:WoP?Jc)sP1mRf)UjiPDrP?^K[fs]rc%cI*U
%\VTIqke*oe/g@Io_Cc!U+t3h660'9a!a2s6iPLm6n.F($:cZiB3/PQ>8/,eG2poFB\SJ^<Rn2:S,5R8R7%/UCi-2IKf$E/;2t<6k
%!CT$A@Srm6K.'PYOCSK@e-)UO+'qMI6TBQ.8>q5]irg'[!dM5M)Mbn5&W8]DZ\E_$5Y+QK$*l.CBhD2a6%d(p<<N=:;]6j:(\Al'
%">M)6.A-_#eMpNI.!60D6)#\+Pm0hMGMESU0A0M;)DG*K6c7mJ+4NK[.8Y1R0b'O<d3-t,OKW:"P6\_YR>3^*@Mr7;8kLfI+?]C&
%D@+2YBtg^i&Jsl.-Uej>O<^T[;jgb-6-0_Q-A^MKK#%PV)8,8E2mE1N`bU1qp&_I:i7hC^.t)Y<d&hZ?-L[Ard^eKS:UQo.B(T3O
%YJ2U/[)K]jkUbrW<0%/NYLMK/\"*Fo[%Yj>L#TmkVu4CSg+HdFKo;&4<NDK'k.M-'`9eA'0gXEYW_m7KQhT#UTI$bX/+u</(d[Eg
%h]67Uoar>r!@Sa/0RsqlbR;l34c]=ndu&8lK8>s95:`CYn7"%I0GsKq8tf<g\NpjuJfBC&;PQWLNL:21ec\?jU':\9MS(o:(7B]m
%72>nI/p1'##?Zh!`s'HoZ0NN-(PHJ\?<#F;%$Itj!.2('Jhe!J%hY^f!m+#HMIL(oM^([+N2'QG"=3\-N\.oh3=ZD\%"U,oALJRO
%P.Im]PmD@r"\?^nYLSFP3[*7P3>iM??3lf$:Bh/,_EL;8Hc;.@I%"a,\aa$L't>bdrTHsO=CWOMJFR`X;B7mn6[QKD[pb$3#>O`]
%AVr'(K&S7R:qRC06#H\>>@\%.D[#-e8\&7=)])XT-]5l5*4Z%^5q:b`gIEqNeAF<*3e&V+'(kZF_c3!k0-]Y11cMYT@b;@W]^Rb<
%U..<9XiZAof4P_PZFTT72;8gSURSp\h/8*p[0o:.5Tm5soZG8*q`qI>-oe"t%#n'KfsVQUK"$UJTK*Wh%mdUPK$:"njaq,Tcse(R
%H@,_E^#HRBfP!P4!8SQhJ`B_[8?/[W=hJU2+5L3qAY=.("1LsUo?_l-'./f<(g+Z:;!K':D02$R]&7i;Y-l5h)_*S]B.\aRNC*XP
%9*O3l5F`HT7(V1q:GpLgY,EZhMb`M3D8(B:Wu5_Tgp_'>=`d'+\@n5mk,JOG&hB"InA=FYIqG3enHpkm<+npt-;N8k?9\G<[J*Y2
%JU>SCCT&tL_+0,u>_+8qWjloX-jo&!;K,>FDpI?HKlJ&a:D508$TrsfJFH:QF;2aE$#&f?R&Crba+G1A^QCUuF!4Me/`*mE#m"gh
%ec8q8j:NE@d)7@Q]Qo6e<HlASY8gEuNDR4QSaM$*//Eg+#3Gq9OW1#VK9^8'2@^YjJND2V4R^8Nm;YQFnf]EAIIV;,!Ci0IBqe&-
%(4-#s#so@CQfBG\_)q>[Q"kE>P\uT'qD5d[M<^u&blEKCnJjf&@cH#F=)ZP-i><4]*l@YuTg0#ITg`P5G#7LaDqB#_=TSP,,t*37
%*52@`cT`P*D&g8N8*,V3Jnh*%]$=;=37\jNhi7)p1i]]#6!RKfkost6"b)Ka9uD0?d9VK/fhO1:V2>Y=F'A584M$GW_h*&+*-e,N
%4tHfen3s"I\7f31Lp$iu77%]$Wtr\0'T"nV`6IC5\5>o,fpWPd!DUeWgn7g)Ik)#so,BtbO^;('o2/0*#i;Hs64q.)*sg;ne=5=]
%LCk&KF?TsQ"%CUGOeKV?/mk:tpYg.U=XHUg7(EV2(+CEd]hJiV@Z04a$"WU4Ln`*>JEhMY8o?9BX\T43]edU'kN&J,phEMH*PO]e
%KHc54+cq2+-\E[)i:'hm[$%)HX`=L-">W>K_^AZ`2M9V&8f\"i&uZFs!D&$*he=P`3b$!-_rFX>GX;V&r1[&72M,DcU77<LMtlZQ
%9HZ&_*+$R9NJ]^5N%JuT+5-o[OG5?+ko1f*gHd&=+NVKo5;"_&Aj@(<Ab&=3.\D!nM&Y<[-*rJX/"X,A1JVV"kaWM*49Y=rfSaSZ
%K7-/&(YjgpOB&rK5Z:B)i'qB4f(Z[:'3qR(,'VQp@cNLQ$*JOC:eWD'N=fWq\S;2>Gj.5&,]-T23<ki8WH?u8iTbc0kn<AIWPTus
%Gi0@<_@0HXe_hqb#-]hd!rA6iJe`8DXSoOd1iO)sfW-><.ZH?*ADa+<aIZC]h?tdO*<D^8Y/[+mSTSmM;'/oi9gMlHM#`@;2C;SB
%kj#4!Z/EGh^Ve&9:d@H`T^6,(?hJRhNb.g_YQToFHj$obdMZ0JJaVcB`!sM7Tm0S'-#PCVB<FRqj3Wn"4pgjZ4t\qrZgX?Y<",?I
%UcF-Q8*T%(-rr<f#O.dBpaU#uiKXRBk]H?ZL)C-L^[?Leo@atPrP2Kld,fK!RjN(,D)QCCe.nMn_K-bJ*\<r2bkUY:n1%CS6^/"8
%o1'"A3.r&YkcL^Ud),7`nB.Fe/B&e_*Y,CH!6LKqGLr_87+&E=QQdT/$G.Jn/jn\eRYCqs16f!=M]Tp^_<FrZ;("(0&L1KGJJM`l
%>MMapF[F,IbeTu2%1.\>7[+/),!uNliT$UO_ERh7PoD!dIrsFF9WiL':T[^$";Oh-GUS1'ks3i+`+;#fdfUcqE@H^:[``UBP+'95
%795HP"fOqC!\,J:^.S%-`W[2W+!F%L70YNl;-P2VrIU0\d]oK(/E'Fa#scO1,q(JcndTb@PsI,*a\W8hN0Mg3^1(@[H5m?P!6#*U
%5_Xa`^?+Quc/sp&U-<*Y,bP,SdN#Y0EYd,>,8dJ1_'HeYC.+BafAri0=/nJ?71'<%3ki(Rm[[aHbYSA6D0,@\L3`]uV=U6"&D(AZ
%_.\QRC.CUti5i0V,E=-[+c6q0@YiT/21Xnb7gWXZ%n]*,-jo:$\:%X:Kcr?A1cKg/;F7%o5WaQGgshBLs1l,:EVl3@oNS$9FA^'^
%N*@Hp]!qbe])Fu3D#V3Zo)NGRTkpu'=GY&VB+Z!S.g%ASM=lAWj-gf'XP%+2l(Suooo"Po$%[ba<KU78Mm[h0mJ(1Q8lUF:j%gIS
%=lR;Q<NIdX`,TS*WIq[VnLAF9rH,]T=lE:]GVbB=VCW/7/[6$]21dArJHeJ7B`3P]0jLpi*ucuSA]<1c'NT^`Q4V@f$>n2-$&(Wn
%<>TQIi1#)_$k^/iP2=T?+o!"L61!8<)C7H.<b/e#5h!7f+(*U=`Kp;a#][8RAV?UXI'$Rl&1(bVW6aVu?Br`HjWAh..O_9*C/j)I
%k*7InAZ3m3bpjbkUG<n'H@g<2n]1rB`Z@B;,U&'C,+t;:r5t-%8@O-(]$u96&VQB>4+\\,%UUP[N<(bp#p*O-4r+ARR+Vbe#U.Pu
%8FZXtmg=7*`i\;c5lT_[H?f`>,uW/HIF/-*E.Q5Bd"#1"j2U<dnEUS>K/`;WLK/I,77jlXgs61V+C<a_/+ScG.3A&MWX=?%\MgO`
%>OuV>/S(/0]"Q]VMs'q/h]c-()'09RQbJEU[XisF7SDa:Ei@Y_I2#*5K*e;jp>O*Jii+t>+4/`S;^\)ps&KV>EmJTFk:=+7'kga9
%g3&QG98@Lj1)PYZ%o9d[UdMK+_e?L79Gbmp1'IIQc"6giMSFXd`IU^*c6'n;W.4]'0D$-O!P[9%4?c3?a)sIgDo")p2I=2.nef2#
%[m]71B/7NV%TMp";g^-/K'"Tq>FJKCPR3,G(f<^^GUGIRHE2Vl&hE,%8oF^96%p>pqZ5d3g_;t%]rA9RO;hEbp)80'BWX%+f,6.=
%gc`,QT=r63CeU<e`qHe*8d!Ui:Q%%@GD(Tm-+SUG`,$r&GmEp#dhHB@BY/.,EpP]9l8B%CGAnQbGJMDZ+`9aOR^GjeetR5(1gXU#
%A'u6h\r%^&)[Km?g>!"dN]X'1ap)J6Rl!QF`U`JPF;jKBhZeS9Qa8pmHsR_QaXZ.PQJWgS)*<r22FUc,RMlXGom5Z[T&A3/9%nd?
%W<r7)8!R<"Ke455`^ggc`&8ak?ch`Z>lDAjXA2L!R!0-]4edooErV6mKO6%qqsY5'NYp11fm9`[O93'1@tuC!fd/uS<cD?&Uhrg7
%F>)iE"-<:LYI<)[>GoHL=$&:(NZUEUS9JuMDBpaNI,7,nI\IiM43d$!HVl,`9%8bZg%4?i48uEDLo+!3SIig+gF)g:+k5NTGP<gu
%6>l_/it#)X+g`72`9Ojf;#U#Cb.WKdU_KY(a*[R#^_?rlXGoCMP6luQ/Qp3kpnlfYboqJZTRf_!V"L+`Ral2+1KhN$5U_(;;ikZT
%8di>;$I"'DP&BKXE!I=fCG:kJ(E>6R!6RcIHoC0]lEI"C3W")aOXl`]Dk'A#`:8l4&ZoU+/;Gs4.@rE$UA1^5_1]$$cjYdrLEnNo
%^GW]*GIlpIo;tY3eI8H\KPuXSfjM7r;r7TMPU'Of,@j;VaTl_W6(d>r#e,GE]_YS5onR_cogZj@8/f:%N3m.]G!qEC$2mBe!n0mr
%L_`2p[OcoA4!Cc)BjOgecE5jbqc?l_[mES:qYQk+")KBX/3UK*h!ge-\AULb1b8&'O>0ECLkJW"n#!Wn7Ud!6@U2SuU$e:r:2kRE
%&ah.r=i,_HYJ+MH0sYLOc:ic-gA/VP.#$YK&a`sHQ&8IEPujs&f4e9E.oJ)H;KGL//i@fojmn$,<\el^drLE-V*RA-LljS]S!V5]
%fI29f'oD&5:aAalKE@ckT$47rX,+E^-\s>IF]/!A>`a*9(ah*\*#;2uL?+pY9YmD.7JGIV7+=]2#!)73V.8#p)Fhif,pNb.preUI
%8Iu[d*YkS:,Yfb[:_k)g:0p*(NeXVI4;SPXA6R8XefeB;c\'uh6'M/]?H=YON'uE7iV=a.@2Q^D<bj+ZAHo_2$j#\36UuEZ>f4*1
%U<5a3S9^Zn'NDXE35No"\nF>RM1hZD(JHM%OYjp=+<`G1AN$F'q>oQJ^k@6M"%[_<#Y&;Uce@pmE7_?tU)PGu>u3ok2pGHkVjW/,
%4uR>m!IOi@#H[-!)b_A1Y\[)pG`!arlQP]O0m"i'6#O`:Cq+rDcsaj;L/+^ef$L+i(ck@Kljb&K1)s:MbbfcSn2!^W;arkk%(q;t
%6Gm[tb_EiapKeLsHSYK`XW"Ki.ADHNctUkW*;Ec\WoP;:5<+M0Jo3_IjXju'OVn0-RZ,?XBJSFmgh2=#l(Wee@3?_P6i"#trFPmb
%U-V959S;)A@EaU<B9@jLm/dl@C"(a5F!e_S8]FOqPY+)m"S4I'q>'-IJ/Brf%HB@=.\(9k'=PhFkJ#Sj0PpLkT([:.ocjZ!0,/Bm
%(NYZWiH5n`3K'@+Cl.$)$7=*P/2-UG(*Z?d&TkCa\?7'hI>N\70RPDrI@1d\=)7n=KN8V&2j5hX*;%4!A@JXh[2VKd*AnR0(6r7l
%ZPBbU4g+OH&<"[]D+(L$\k?=nf7:K"i5V$^5YDP8_SHC_ec5p:@^F&Kif%;$dTKr?e[dQTZ;bZ5@:9bMqoOS1f]q(I<8/04fWgb:
%X3GfC+chNO5SXma<s1Dd'\u)Pil\\_F-QN+(j#.i.)%6GgK$mOmQ/N8AjmSpE=NG6]2f1@F"))?Pic0-]S6l89CUJOYT!Ih#?p/&
%q6^I-)&7F=qsPKbKQm:bWC:T$mX)=TW6X]kfmVnb'odPDXh]IG11ao\5M/g0#Ufa9>hXB13g?-e*Q,Wd:3biH7qVH`WRY,hg*<!P
%5u6Z"1gs]G+hW3FFQ.>[QDZ::$l_>lHVJch`7pC%2!E+ho>/2Cf'csN.qn(a&k2)/[.Reup>W.9K%I\:i!1G25<R9sb]i>`"?3sj
%%TjgfpWEC]:BR5$?`K4>^'+:l#SBRq8];fU1$MaRX-iSd\,SBN-]m>?613kF9_a!\nT@W0NMsq#Z)iP$K!n5"B/^(;Mf022EGPKN
%C@D*$W``[-f(;lGh0Qd.:QYFdFVr$so>pAVq+G3*_O!mO4cI57+\d^u4ET3[EXuO#B7e`[lnBXO'$&Z(Cb[.1Xf*"LL6TKkOP2rW
%_9:`)H0UCO-DdsZKY]S3kPsHIZ[n=P,s\?<biTpDD62SeCL[a<eNI2Qq6W1)a#t#W<E[J2p1L4A[CIce7Hth5E;.@U:egHMgL_LQ
%j5ntNa(pps*n1<jX`ugWU$hh<g@5MF3EME56M;%'m>E43oY>b#Gmf[si)b_,$`,"p"@!!:?+/!$r8Vj`Dp1FtH66(X)I%_]*@:ai
%00Kfn<j*f7fATu>SXGLRYe=eAFUR0]GY&R)#IX0KRTnC.o1&aY9'rhPEd9+8\8MY]7PQ,!-2!\E+Ni_t+RDFNVsT/YC.hh>b?bmo
%36K\N5a6SYJ41nU:ipB-\NVN=*NE+iC6>AId:G!`_2cdo$@TK?]"A"]E'?dJ_'V;@5[n<ffitr(]2`F*@^J?cY5?>g?u;P,Lk[71
%l4>.d[+`e=8$m]pC#YgV0]%h\1oD!t-S;EQ8!0_QP[ZKiQ'U?UZX\%)D0pW$:A03krs7^B'Q`ZM]p8=JH>_$Zk[X)Zq>>K]S!iHE
%eJWr<E2_L3p]j0/lo$T\hi_i;-psuQ5nT-&a%o$IMg:"#**E=SnO.B..jQu4G!R#`7jIi&oNB1la0X8mJ@HLROE$"V2RF_pj:@Y9
%L`":Ur'7?E=Q`3T``[k-(RkGIh"]uT$h%+;F!.;["[:IX;dQ)4%gpa)RHu=ci51*EZ\gMZ6_X<(\pA`j`&ua==TP=7O/'elB(QJc
%1F_UL\WPr/B7!Zj6-d%JI:Fp(..6)c((0SFQ:-i,.;S2L"Z"Z$+*Y,*Ms'6_=n`.)[@%>W3lZPU49L@ur`\j2H0G41bThkNhMTnk
%BHk2M+_Y_8L;`HmA#DQ43hrtSY.K>G1j\!qe(ei6TbAQoa!aVD4TVD?-2SS`[&C2",BO$j`Q:j]RC!^F!?d>^Q5C9@lN=DCZ]8)h
%8;eS0"/![qYh1de?:Q,L-SkQjmY`@"9`5mrCO%#m&=pMU^pqD(/2hlqmHIXt#!Qf1"[k`_*=!3W"rf2a610AOFlgc!IN6HBU.Al)
%3Z5u\SX_]p@H\90i&o#pV]7#ik7Iq`>#mbl*c9J3g)STJ^r7-,2pQ,mnKK?Ee)P#!poR%l;\WaT=Yj/94\OQWiN51M]-ioW6`0&U
%=>,c-r$64uGk#AgM06qm$Y1=#gH=5E-2B=#TgcX6$=96&3lTA(V!89PV5XQ0=(r8[Z.\+JD_D<KP;b^rS[k$]V(ec4Z<e7fh9\aY
%O%j>rBu_:!cQ!FNk?o5\12U.F'`4d4A`HhG.g>-t24]9QE(o\Jf*o/RT9=DXG9^!<L5N"T?t9gC`FPR-"IXrR=aqldC&9%`]h+tJ
%g7gRpTNie0=qp>U@-ZR*gDYJ))='$`e'?)m.e@.ToT_\.1M@CL\_g58Vot(>q-*XrkO?B(2c(G#?(""COJms$^dM8NWk`XImO@`6
%6A6[M[tQ/EiFN[^FIVrf,qN:^B"tVE6r?+*+(3HmT_qsq(MCAO1.AkqP5O<`]\dQ7LX=4b)?JsM7"t14Pp?`O7ed_;U8j%\M$^D]
%1U]cprLmh6P:9g.RIKf(h\Y]uK7?1,ja(gaj.!C/2TpW!o:P`TD[s(p5;udPY^M_&[mH/DK(f0Y4-7L3%ko^pp\c-AqIFJd"B(m\
%lqZB($9c>]/&Nlp&o.laa1&l^.qp+DoB>mWRmYT&mn%WS,&=CG>qFrDd`&,UlePk=Yspe%7nM-M>c506Q^`C'C\'TXE3fIIAPnug
%h`52.O$I19jD7'ff9MqN^LGfL"U.Ta&6F[YLQU:I.;WQb5Ukf85Eg?lq22q:H,Wa;Ll:*M;OZu[oH*#XB2NL*)tX_V>0YA79G41r
%pD3^jGuIB2<d>Abhbq`UA9h&8dge4&GI#_VbpGsN1bf]0Uam1sQ\kU^4>nT(NG*'RgZ)[8,)scH8HYA82a)LQmmiVlbAAQH1gDZ8
%0g\]CA%07c>3tX_BA8GDq5:C,p%n,73>METSP;_"hkrlE#H4E1Tp.?9]hcg,^[<4#n=aJ8*HWmi(,mp8@GcE1lL`qtC@Bia`Ld=K
%FWB0,2l*]g"5Vh2-u[YH;jnYV]p3B=*]%Nr$F4rb+(AE6:tmiH>38Ym[&'0Il2HrmOQG?IkV"DSB@j)CPM'bglY)EhHR^G5S$K,(
%],.cMdju4.<Kc`2fb_V)k%[h<3gjbV/rjcULMI"i_2/^6bXPeuPKClgfT)+Ugt:T">V&ECK%lNKQ[_N21\_r(Q$Td(8M'Rr;68QD
%_T>NH`Q*Z54`FrN,IN%hDO`9KF%UQjkMZ(L,lZe]bKc'%]2/V\OtN7p#p<bf.Lb+u[$VaaG\ia<KSI\a0.h-2!tcm.(mFe-P).=`
%I$fgcNo?A]&P%'[j*[iR#q[0f!"e82'MrkhV3aT!;$J;n?-+G(!_PX;0(;kAW[^G*;@Tf''?u/dP\Dl^-(YNPTt"_"6)POlGkEd6
%`,!9k%5#Y4&h,7bnsq!Z9;r2[2TA0T^4_RraWk@H:_$4^EDD-"VaR,I-YW6JP*KZflS-9*55/q_@lp&N!4p&.k5tQ!:(J^=\1X0O
%e^gNWcH)?o%]Ve-WK@H\Es/%2ECT;$i6&sAJ4>kF8;>22e)=Ka_Zse\:]Z1M,</(8I2ik$,[nP.Yg:#I[4;Ol_W5d8+I:2&8IBlK
%l,t^/pVj=\#60eBBicG(oNk&!k2m;16reNDP*AWafa,kIk]UQZ^el-tSf*6caA*:n:)s&^>#jjXm61X<S-\0eC4q[V-LFtO8JED6
%KVS!qP;Srk4Z!T_geVOf`E#XRTH\3@Ep(N9E=[6@UuuL,Rf<cX4)#-U('kutpZc]Z0#)4*F;jo#R@.uPP:0M3+=>tNm%0$,D>#.=
%U/$*WFcmRfN^(t-%rq<J:$$.S]9F*MZd,#LfWhu>'/u$bR`[`>25Y`AN0AkB1<)gGb?\aXm&lqNA[]&bpD/D<WmOsR5-YB9<iaN7
%G$=f'K*FQ_R_c4cnQ=QaY@Q2b*>S,n'+U;d#oTs*F*1msTf_Q:PuU(A9K7ToEB&h`rttZGEOO`Cm<hH"*(M`o&M)CG8UKlCg:ui4
%W=5tA:c._m\MDnNasJ*AVh>?a#"l%#J@K&Pb?<Hm0[Q*:Q]/3ld`"a*EGu6*L,Ck&-5n`n@K>@qO/2cP`V9dJ%;4s7mL4CpOCB1m
%-@)+orQaX5+mr(lXb8TZ+BAcVh4MWXWd&.J2lUacX("AbHDatbT8Xe?0pBs7"!JKjaL`C^`RddK"dpQ^UU3F2)#d/VGi>"XH]QcP
%]<<+^4@$+alrs=[NL$\L6%#XIAOV`hrX&tXLt&YB@F59A(cs=o+G8N$!J=HH"sKG,f,J&c#$CO/;@HZn/*:+Q"--l27Wd^f((C&5
%[<+^:gjt6$c"*W&mk%S29lY,fXqeYODS`+";sas,*5'b2!+a4if0Ylq7Ii'+]][p&qMucm1pt,p?TcD4@MhEX&1:hC)6B3/f<@EG
%g@F1S)@j`&^fK'A\O!Wjj]IiMN?>V-?R]TgD)SL)_[rThr<UN&k8%ab>VVa=Pth!R%&VCf%K^CO.FK.>7daP:)pkt&@W#!o`_AY*
%lgl9#F_"Gnkqf)eJ)Q7pWD(bq&dCsnZCRfaAOdUW@+S>3NR7>MUSAS<&aD&-ef19R$9O4#\4d^H@Q%WG;hhhK[2:jufWOZ+.,1T(
%-aGZ%etcbJdOd*<8?mPS2P=c*`NWu.hm':#,V^A,+J;DkQ'ZWRQ0&L]22B.e^okq:\O!V?2u2+/QNuGsF&G*\rfV@@lm&hl`6'uq
%3lBQp(9L?b.ndYujR,RW=Y\V!MbGubY(U@<*u=5)OD,NH\N_2V!)jN8OUr]3W"<]uF^LuOM51:DL;G>0T04^pKK5i00U)`;rU[H>
%COIC(fg8)(#2%<m]a]LC)\V;@-Df@S,7PS,)u3>qe$BHOM#"@,R#ug,H6P4</$:ZQj!$;SeqE4J-lC+=r2?6ib_-*^.(0."9Qo&`
%[6g''J><9']oW[\1R$B_>Ig").a;KXn3ne\Cuo>,.KeSK!NE*FqO-1[`"Ig1'(Z0bq^JaWccu;lG"iebFL!;q5[Oag!N"Q?N>r-l
%PCOVek;)_:)F/#O9&'S,E[#nn*CSTR5`Q^d6mQKL1V7*9D,ZHB6^me8`m0Mn&.Ddd&1*^'B83DMaD%IlkD7A);nk+q!Hs,i;d4MX
%W[q>ZWg'?V\>5(Uea72K%)t_R)/'ZH8gEJ./QF0"^WjuFjA;WR2^U.8k@dUGSihfQ+\D$g]SGP]^rC2Y-dnhWAG1o!<WmSpA8LQm
%EEb,4n^!$$L&*TgGsN8FXEfP*C^b>*1>p`@gM)VqH"O^hEcp>;75:8Vm?LP1n>XUF&p^^_*]s\#\#THtBWi+iEI8#r%'XQM@_pOl
%%^b3$p_TKd"Pfmgl<YI78GU`?nG#]aW,Mn8k)giNle&U%AOneJ!EXplQtF"4$!5A_9)Zh#/CZt:k7!+B9J'?<?[4Xd(6c"3`E-l]
%"O*@?,Z9F>cKi>_P*63ENTCBi6!<1+(Skl[Gl>A:U?iEjQ2^N5TDs"_qsiKtla6`MrV,'=hYkcU[sri+m_eLCpX?<aTANr2rqnQe
%HhY#??^IBK]_hC%IeiL$o'9Y3q0sN3W'9_,G<c#q5C`^F^B<prMM(~>
%AI9_PrivateDataEnd
